#!/usr/bin/env node

/**
 * Script pour v√©rifier la structure de la table companies
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function checkCompanyStructure() {
  console.log('üîç V√©rification de la structure de la table companies')
  console.log('===================================================\n')

  try {
    // 1. V√©rifier la structure de la table companies
    console.log('1Ô∏è‚É£ Structure de la table companies...')
    
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('*')
      .limit(1)

    if (companiesError) {
      console.error('‚ùå Erreur acc√®s table companies:', companiesError.message)
      return
    }

    if (companies && companies.length > 0) {
      console.log('‚úÖ Table companies accessible')
      console.log('üìã Colonnes disponibles:')
      Object.keys(companies[0]).forEach(column => {
        console.log(`   - ${column}: ${typeof companies[0][column]}`)
      })
    } else {
      console.log('‚ÑπÔ∏è  Table companies vide')
    }

    // 2. V√©rifier s'il y a une colonne pour identifier le propri√©taire
    console.log('\n2Ô∏è‚É£ Recherche de la colonne propri√©taire...')
    
    const possibleOwnerColumns = ['owner_id', 'user_id', 'created_by', 'owner', 'user']
    const foundColumns = []
    
    if (companies && companies.length > 0) {
      const sampleCompany = companies[0]
      possibleOwnerColumns.forEach(col => {
        if (sampleCompany.hasOwnProperty(col)) {
          foundColumns.push(col)
        }
      })
    }

    if (foundColumns.length > 0) {
      console.log('‚úÖ Colonnes propri√©taire trouv√©es:', foundColumns)
    } else {
      console.log('‚ùå Aucune colonne propri√©taire trouv√©e')
      console.log('üí° Colonnes recherch√©es:', possibleOwnerColumns)
    }

    // 3. V√©rifier la table auth.users
    console.log('\n3Ô∏è‚É£ V√©rification de la table auth.users...')
    
    // On ne peut pas directement acc√©der √† auth.users avec le client normal
    // Mais on peut v√©rifier via une requ√™te RPC ou en regardant les donn√©es existantes
    console.log('‚ÑπÔ∏è  Table auth.users accessible via RPC uniquement')

    // 4. Proposer une solution
    console.log('\n4Ô∏è‚É£ Solution propos√©e...')
    
    if (foundColumns.length > 0) {
      console.log('‚úÖ Utilisez une de ces colonnes:', foundColumns[0])
      console.log('üí° Modifiez la fonction pour utiliser:', foundColumns[0])
    } else {
      console.log('‚ùå Aucune colonne propri√©taire trouv√©e')
      console.log('üí° Solutions possibles:')
      console.log('   1. Ajouter une colonne owner_id √† la table companies')
      console.log('   2. Utiliser created_by si elle existe')
      console.log('   3. Utiliser user_id si elle existe')
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error)
  }
}

// Ex√©cuter la v√©rification
checkCompanyStructure() 