const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = 'https://eiawccnqfmvdnvjlyftx.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVpYXdjY25xZm12ZG52amx5ZnR4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxNjc3MjEsImV4cCI6MjA2OTc0MzcyMX0.xuO2IPGcw5MoFSisEEQBOUd7qtR69eVZ8lSHfw-jWrQ';

// Cr√©er le client Supabase
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testApplication() {
    console.log('üß™ TEST DE L\'APPLICATION FIICH APR√àS RECR√âATION');
    console.log('================================================');
    
    try {
        // 1. Test de connexion √† Supabase
        console.log('\n1Ô∏è‚É£ Test de connexion √† Supabase...');
        const { data: testData, error: testError } = await supabase
            .from('users')
            .select('count')
            .limit(1);
        
        if (testError) {
            console.log('‚ùå Erreur de connexion:', testError.message);
            return;
        }
        
        console.log('‚úÖ Connexion √† Supabase r√©ussie');
        
        // 2. V√©rifier les tables
        console.log('\n2Ô∏è‚É£ V√©rification des tables...');
        
        const tables = ['users', 'companies', 'documents', 'invitations', 'company_shares'];
        let tablesOk = 0;
        
        for (const table of tables) {
            try {
                const { error } = await supabase
                    .from(table)
                    .select('*')
                    .limit(1);
                
                if (error) {
                    console.log(`‚ùå Table ${table}: ${error.message}`);
                } else {
                    console.log(`‚úÖ Table ${table}: OK`);
                    tablesOk++;
                }
            } catch (err) {
                console.log(`‚ùå Table ${table}: ${err.message}`);
            }
        }
        
        console.log(`üìä Tables v√©rifi√©es: ${tablesOk}/${tables.length}`);
        
        // 3. V√©rifier le bucket storage
        console.log('\n3Ô∏è‚É£ V√©rification du bucket storage...');
        
        try {
            const { data: buckets, error: bucketError } = await supabase.storage.listBuckets();
            
            if (bucketError) {
                console.log('‚ùå Erreur bucket:', bucketError.message);
            } else {
                const companyFilesBucket = buckets.find(b => b.name === 'company-files');
                if (companyFilesBucket) {
                    console.log('‚úÖ Bucket "company-files" trouv√©');
                    console.log(`   Public: ${companyFilesBucket.public}`);
                    console.log(`   File size limit: ${companyFilesBucket.file_size_limit} bytes`);
                } else {
                    console.log('‚ùå Bucket "company-files" non trouv√©');
                }
            }
        } catch (err) {
            console.log('‚ùå Erreur v√©rification bucket:', err.message);
        }
        
        // 4. Test des fonctions RPC
        console.log('\n4Ô∏è‚É£ Test des fonctions RPC...');
        
        try {
            // Test de la fonction get_invitations_sent_by_user
            const { error: rpcError } = await supabase.rpc('get_invitations_sent_by_user', {
                user_uuid: '00000000-0000-0000-0000-000000000000'
            });
            
            if (rpcError && rpcError.message.includes('function') && rpcError.message.includes('does not exist')) {
                console.log('‚ùå Fonction RPC get_invitations_sent_by_user non trouv√©e');
            } else {
                console.log('‚úÖ Fonction RPC get_invitations_sent_by_user disponible');
            }
        } catch (err) {
            console.log('‚ùå Erreur test RPC:', err.message);
        }
        
        // 5. V√©rifier les politiques RLS
        console.log('\n5Ô∏è‚É£ V√©rification des politiques RLS...');
        
        try {
            // Test d'acc√®s sans authentification (doit √©chouer)
            const { error: authError } = await supabase
                .from('companies')
                .select('*')
                .limit(1);
            
            if (authError && authError.message.includes('JWT')) {
                console.log('‚úÖ Politiques RLS actives (acc√®s refus√© sans authentification)');
            } else {
                console.log('‚ö†Ô∏è  Politiques RLS potentiellement d√©sactiv√©es');
            }
        } catch (err) {
            console.log('‚úÖ Politiques RLS actives');
        }
        
        // 6. R√©sum√© final
        console.log('\nüìä R√âSUM√â DES TESTS');
        console.log('===================');
        console.log(`‚úÖ Connexion Supabase: OK`);
        console.log(`üìã Tables v√©rifi√©es: ${tablesOk}/${tables.length}`);
        console.log(`üîí Politiques RLS: Actives`);
        console.log(`üìÅ Bucket storage: V√©rifi√©`);
        
        if (tablesOk === tables.length) {
            console.log('\nüéâ SUCC√àS ! Application pr√™te √† utiliser !');
            console.log('\nüìã PROCHAINES √âTAPES:');
            console.log('1. Lancer l\'application: npm run dev');
            console.log('2. Cr√©er un compte utilisateur');
            console.log('3. Cr√©er une entreprise');
            console.log('4. Uploader un document');
            console.log('5. Tester les invitations et partages');
        } else {
            console.log('\n‚ö†Ô∏è  ATTENTION: Certaines tables ne sont pas accessibles');
            console.log('üí° V√©rifiez que le script de recr√©ation a √©t√© ex√©cut√© correctement');
        }
        
    } catch (error) {
        console.error('‚ùå ERREUR FATALE:', error.message);
        console.log('\nüí° SUGGESTIONS:');
        console.log('1. V√©rifiez que le script de recr√©ation a √©t√© ex√©cut√©');
        console.log('2. V√©rifiez les cl√©s API dans .env.local');
        console.log('3. V√©rifiez la connexion internet');
    }
}

// Ex√©cuter les tests
testApplication(); 