#!/usr/bin/env node

/**
 * Cr√©ation d'une nouvelle invitation
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function createNewInvitation() {
  console.log('üìß Cr√©ation d\'une nouvelle invitation')
  console.log('=====================================\n')

  try {
    // 1. R√©cup√©rer l'utilisateur connect√©
    console.log('1Ô∏è‚É£ V√©rification de l\'utilisateur connect√©...')
    
    const { data: { user }, error: userError } = await supabase.auth.getUser()

    if (userError || !user) {
      console.error('‚ùå Vous devez √™tre connect√© pour cr√©er une invitation')
      console.log('üí° Connectez-vous d\'abord')
      return
    }

    console.log('‚úÖ Utilisateur connect√©:', user.email)

    // 2. R√©cup√©rer les entreprises de l'utilisateur
    console.log('\n2Ô∏è‚É£ R√©cup√©ration des entreprises...')
    
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('id, company_name')
      .eq('owner_email', user.email)

    if (companiesError) {
      console.error('‚ùå Erreur r√©cup√©ration entreprises:', companiesError.message)
      return
    }

    if (!companies || companies.length === 0) {
      console.log('‚ùå Aucune entreprise trouv√©e pour cet utilisateur')
      return
    }

    console.log('‚úÖ Entreprises trouv√©es:')
    companies.forEach((company, index) => {
      console.log(`   ${index + 1}. ${company.company_name} (${company.id})`)
    })

    // 3. Demander quelle entreprise partager
    console.log('\n3Ô∏è‚É£ S√©lection de l\'entreprise √† partager...')
    
    // Pour simplifier, prenons la premi√®re entreprise
    const selectedCompany = companies[0]
    console.log(`   Entreprise s√©lectionn√©e: ${selectedCompany.company_name}`)

    // 4. Demander l'email √† inviter
    console.log('\n4Ô∏è‚É£ Email √† inviter...')
    
    // Pour simplifier, utilisons l'email actuel
    const invitedEmail = user.email
    console.log(`   Email invit√©: ${invitedEmail}`)

    // 5. Cr√©er l'invitation
    console.log('\n5Ô∏è‚É£ Cr√©ation de l\'invitation...')
    
    const invitationToken = generateToken()
    const expiresAt = new Date()
    expiresAt.setDate(expiresAt.getDate() + 7) // Expire dans 7 jours

    const { data: newInvitation, error: invitationError } = await supabase
      .from('invitations')
      .insert({
        company_id: selectedCompany.id,
        invited_email: invitedEmail,
        invited_by: user.id,
        invitation_token: invitationToken,
        expires_at: expiresAt.toISOString()
      })
      .select()
      .single()

    if (invitationError) {
      console.error('‚ùå Erreur cr√©ation invitation:', invitationError.message)
      return
    }

    console.log('‚úÖ Invitation cr√©√©e avec succ√®s !')
    console.log(`   ID: ${newInvitation.id}`)
    console.log(`   Token: ${invitationToken}`)
    console.log(`   Expire le: ${expiresAt.toLocaleString('fr-FR')}`)

    // 6. Afficher le lien
    console.log('\n6Ô∏è‚É£ Lien de l\'invitation:')
    console.log(`   http://localhost:3001/invitation/${invitationToken}`)
    
    console.log('\n‚úÖ Nouvelle invitation cr√©√©e !')
    console.log('üí° Testez ce lien dans votre navigateur')

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation:', error)
  }
}

function generateToken() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
  let result = ''
  for (let i = 0; i < 32; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  return result
}

// Ex√©cuter la cr√©ation
createNewInvitation() 