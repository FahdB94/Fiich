#!/usr/bin/env node

/**
 * Script de test pour v√©rifier l'exclusion du propri√©taire des notifications
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function testOwnerExclusion() {
  console.log('üß™ Test de l\'exclusion du propri√©taire des notifications')
  console.log('========================================================\n')

  try {
    // 1. R√©cup√©rer une entreprise avec son propri√©taire
    console.log('1Ô∏è‚É£ R√©cup√©ration d\'une entreprise avec son propri√©taire...')
    
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select(`
        id,
        company_name,
        owner_id,
        auth.users!inner(email)
      `)
      .limit(1)

    if (companiesError || !companies || companies.length === 0) {
      console.error('‚ùå Aucune entreprise trouv√©e:', companiesError?.message)
      return
    }

    const testCompany = companies[0]
    const ownerEmail = testCompany.users.email
    console.log('‚úÖ Entreprise trouv√©e:', testCompany.company_name)
    console.log('üë§ Propri√©taire:', ownerEmail)

    // 2. V√©rifier les partages existants
    console.log('\n2Ô∏è‚É£ V√©rification des partages existants...')
    
    const { data: shares, error: sharesError } = await supabase
      .from('company_shares')
      .select('*')
      .eq('company_id', testCompany.id)
      .eq('is_active', true)

    if (sharesError) {
      console.error('‚ùå Erreur r√©cup√©ration partages:', sharesError.message)
      return
    }

    console.log('üìä Partages trouv√©s:', shares.length)
    shares.forEach(share => {
      console.log(`   - ${share.shared_with_email} (${share.is_active ? 'actif' : 'inactif'})`)
    })

    // 3. Tester la fonction RPC manuellement
    console.log('\n3Ô∏è‚É£ Test de la fonction notify_shared_users...')
    
    const testNotification = {
      p_company_id: testCompany.id,
      p_notification_type: 'company_updated',
      p_title: 'Test - Exclusion propri√©taire',
      p_message: 'Test - Cette notification ne devrait pas √™tre envoy√©e au propri√©taire.',
      p_metadata: { test: true }
    }

    const { data: rpcResult, error: rpcError } = await supabase.rpc('notify_shared_users', testNotification)

    if (rpcError) {
      console.error('‚ùå Erreur fonction RPC:', rpcError.message)
      return
    }

    console.log('‚úÖ Fonction RPC ex√©cut√©e avec succ√®s')

    // 4. V√©rifier les notifications cr√©√©es
    console.log('\n4Ô∏è‚É£ V√©rification des notifications cr√©√©es...')
    
    const { data: notifications, error: notificationsError } = await supabase
      .from('notifications')
      .select('*')
      .eq('company_id', testCompany.id)
      .eq('title', 'Test - Exclusion propri√©taire')
      .order('created_at', { ascending: false })

    if (notificationsError) {
      console.error('‚ùå Erreur r√©cup√©ration notifications:', notificationsError.message)
      return
    }

    console.log('üìä Notifications cr√©√©es:', notifications.length)
    
    let ownerReceivedNotification = false
    notifications.forEach(notification => {
      console.log(`   - ${notification.recipient_email} (${notification.is_read ? 'lue' : 'non lue'})`)
      if (notification.recipient_email === ownerEmail) {
        ownerReceivedNotification = true
      }
    })

    // 5. V√©rifier l'exclusion du propri√©taire
    console.log('\n5Ô∏è‚É£ V√©rification de l\'exclusion du propri√©taire...')
    
    if (ownerReceivedNotification) {
      console.error('‚ùå ERREUR: Le propri√©taire a re√ßu une notification !')
      console.error('   Le propri√©taire ne devrait pas √™tre notifi√© de ses propres modifications')
    } else {
      console.log('‚úÖ SUCC√àS: Le propri√©taire n\'a pas re√ßu de notification')
      console.log('   L\'exclusion fonctionne correctement')
    }

    // 6. Nettoyer les notifications de test
    console.log('\n6Ô∏è‚É£ Nettoyage des notifications de test...')
    
    if (notifications.length > 0) {
      const { error: deleteError } = await supabase
        .from('notifications')
        .delete()
        .in('id', notifications.map(n => n.id))

      if (deleteError) {
        console.error('‚ùå Erreur suppression notifications:', deleteError.message)
      } else {
        console.log('‚úÖ Notifications de test supprim√©es')
      }
    }

    // 7. R√©sum√© du test
    console.log('\nüìã R√©sum√© du test :')
    console.log(`- Entreprise test√©e: ${testCompany.company_name}`)
    console.log(`- Propri√©taire: ${ownerEmail}`)
    console.log(`- Partages actifs: ${shares.length}`)
    console.log(`- Notifications cr√©√©es: ${notifications.length}`)
    console.log(`- Propri√©taire notifi√©: ${ownerReceivedNotification ? '‚ùå ERREUR' : '‚úÖ CORRECT'}`)
    
    if (!ownerReceivedNotification) {
      console.log('\nüéâ Test r√©ussi ! L\'exclusion du propri√©taire fonctionne correctement.')
    } else {
      console.log('\n‚ö†Ô∏è  Test √©chou√© ! Le propri√©taire re√ßoit encore des notifications.')
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  }
}

// Ex√©cuter le test
testOwnerExclusion() 