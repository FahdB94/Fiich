const { createClient } = require('@supabase/supabase-js')

// Configuration Supabase
const SUPABASE_URL = 'https://eiawccnqfmvdnvjlyftx.supabase.co'
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVpYXdjY25xZm12ZG52amx5ZnR4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDE2NzcyMSwiZXhwIjoyMDY5NzQzNzIxfQ.kuO58UgPjliHAbjgv2OKG0AbLmWpx3wZCcptke6B7Ik'

// Cr√©er le client Supabase avec la cl√© de service (bypass RLS)
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)

async function diagnoseSupabase() {
  console.log('üîç Diagnostic Supabase v2 en cours...\n')

  try {
    // 1. V√©rifier la connexion et r√©cup√©rer une vraie company_id
    console.log('1Ô∏è‚É£ Test de connexion et r√©cup√©ration company_id...')
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('id, name, user_id')
      .limit(3)
    
    if (companiesError) {
      console.error('‚ùå Erreur r√©cup√©ration companies:', companiesError)
      return
    }
    
    if (companies.length === 0) {
      console.error('‚ùå Aucune company trouv√©e dans la base')
      return
    }
    
    console.log('‚úÖ Connexion r√©ussie')
    console.log('üè¢ Companies trouv√©es:')
    companies.forEach(company => {
      console.log(`   - ID: ${company.id}, Nom: ${company.name}, User: ${company.user_id}`)
    })
    
    const testCompanyId = companies[0].id
    const testUserId = companies[0].user_id
    console.log(`üìù Utilisation de company_id: ${testCompanyId} pour les tests\n`)

    // 2. V√©rifier la structure de la table invitations
    console.log('2Ô∏è‚É£ Test de la table invitations...')
    const { data: invitations, error: invitationsError } = await supabase
      .from('invitations')
      .select('*')
      .limit(1)
    
    if (invitationsError) {
      console.error('‚ùå Erreur acc√®s table invitations:', invitationsError)
    } else {
      console.log('‚úÖ Table invitations accessible')
      if (invitations.length > 0) {
        console.log('üìã Exemple d\'invitation:', invitations[0])
      } else {
        console.log('üìã Table invitations vide')
      }
    }
    console.log()

    // 3. Tester l'insertion avec une vraie company_id
    console.log('3Ô∏è‚É£ Test d\'insertion avec vraie company_id...')
    const testInvitation = {
      company_id: testCompanyId,
      invited_email: 'test@example.com',
      invited_by: testUserId,
      invitation_token: 'test-token-' + Date.now(),
      role_requested: 'MEMBER',
      expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
    }

    const { data: insertResult, error: insertError } = await supabase
      .from('invitations')
      .insert(testInvitation)
      .select('id, company_id, invited_email')
      .single()
    
    if (insertError) {
      console.error('‚ùå Erreur insertion:', insertError)
      console.error('   Code:', insertError.code)
      console.error('   Message:', insertError.message)
      console.error('   Details:', insertError.details)
    } else {
      console.log('‚úÖ Insertion r√©ussie!')
      console.log('   ID:', insertResult.id)
      console.log('   Company ID:', insertResult.company_id)
      console.log('   Email:', insertResult.invited_email)
      
      // Nettoyer le test
      const { error: deleteError } = await supabase
        .from('invitations')
        .delete()
        .eq('id', insertResult.id)
      
      if (deleteError) {
        console.log('‚ö†Ô∏è Erreur lors du nettoyage:', deleteError.message)
      } else {
        console.log('üßπ Test nettoy√©')
      }
    }
    console.log()

    // 4. V√©rifier les company_members
    console.log('4Ô∏è‚É£ V√©rification company_members...')
    const { data: members, error: membersError } = await supabase
      .from('company_members')
      .select('*')
      .eq('company_id', testCompanyId)
      .limit(5)
    
    if (membersError) {
      console.error('‚ùå Erreur r√©cup√©ration company_members:', membersError)
    } else {
      console.log('‚úÖ Table company_members accessible')
      console.log('üë• Membres trouv√©s:', members.length)
      members.forEach(member => {
        console.log(`   - User: ${member.user_id}, Role: ${member.role}, Status: ${member.status}`)
      })
    }
    console.log()

    // 5. Tester avec un utilisateur authentifi√© (simulation)
    console.log('5Ô∏è‚É£ Test avec utilisateur authentifi√© (simulation)...')
    
    // Cr√©er un client avec la cl√© anon pour simuler un utilisateur normal
    const anonSupabase = createClient(SUPABASE_URL, 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVpYXdjY25xZm12ZG52amx5ZnR4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxNjc3MjEsImV4cCI6MjA2OTc0MzcyMX0.xuO2IPGcw5MoFSisEEQBOUd7qtR69eVZ8lSHfw-jWrQ')
    
    const { data: anonTest, error: anonError } = await anonSupabase
      .from('invitations')
      .select('*')
      .limit(1)
    
    if (anonError) {
      console.log('‚ö†Ô∏è Utilisateur anonyme ne peut pas acc√©der aux invitations (normal avec RLS)')
      console.log('   Erreur:', anonError.message)
    } else {
      console.log('‚ö†Ô∏è Utilisateur anonyme peut acc√©der aux invitations (probl√®me RLS!)')
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
  }
}

// Ex√©cuter le diagnostic
diagnoseSupabase()
