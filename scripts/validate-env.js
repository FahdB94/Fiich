#!/usr/bin/env node

/**
 * Script de validation du fichier .env.local
 * V√©rifie la validit√© des cl√©s Supabase
 */

const fs = require('fs')
const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

console.log('üîç VALIDATION DU FICHIER .env.local\n')

async function main() {
  try {
    console.log('============================================================')
    console.log('üìÑ 1. LECTURE DU FICHIER .env.local')
    console.log('============================================================')
    
    const envContent = fs.readFileSync('.env.local', 'utf8')
    console.log('‚úÖ Fichier .env.local lu avec succ√®s')
    console.log(`üìä Taille: ${envContent.length} caract√®res`)
    console.log(`üìä Lignes: ${envContent.split('\n').length}`)
    
    // Afficher le contenu avec num√©ros de ligne
    const lines = envContent.split('\n')
    console.log('\nüìã CONTENU ACTUEL :')
    lines.forEach((line, index) => {
      const lineNum = (index + 1).toString().padStart(2, ' ')
      if (line.trim()) {
        if (line.includes('KEY=')) {
          const [key, value] = line.split('=', 2)
          console.log(`${lineNum}: ${key}=${value ? value.substring(0, 20) + '...' : 'VIDE'}`)
        } else {
          console.log(`${lineNum}: ${line}`)
        }
      } else {
        console.log(`${lineNum}: [LIGNE VIDE]`)
      }
    })

    console.log('\n============================================================')
    console.log('üîë 2. VALIDATION DES CL√âS SUPABASE')
    console.log('============================================================')
    
    const requiredVars = [
      'NEXT_PUBLIC_SUPABASE_URL',
      'NEXT_PUBLIC_SUPABASE_ANON_KEY',
      'SUPABASE_SERVICE_ROLE_KEY'
    ]
    
    let allVarsValid = true
    
    for (const varName of requiredVars) {
      const value = process.env[varName]
      if (!value) {
        console.log(`‚ùå ${varName}: MANQUANTE`)
        allVarsValid = false
      } else if (value.trim() !== value) {
        console.log(`‚ö†Ô∏è  ${varName}: Contient des espaces en d√©but/fin`)
        allVarsValid = false
      } else if (varName.includes('KEY') && value.length < 100) {
        console.log(`‚ö†Ô∏è  ${varName}: Trop courte (${value.length} caract√®res)`)
        allVarsValid = false
      } else {
        console.log(`‚úÖ ${varName}: OK (${value.length} caract√®res)`)
      }
    }

    if (!allVarsValid) {
      console.log('\n‚ùå PROBL√àMES D√âTECT√âS DANS LE FICHIER .env.local')
      return
    }

    console.log('\n============================================================')
    console.log('üß™ 3. TEST DE CONNEXION AVEC LES CL√âS')
    console.log('============================================================')
    
    // Test de d√©codage des JWT
    console.log('üîç Validation des tokens JWT...')
    
    const anonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
    
    try {
      // D√©coder les JWT pour v√©rifier leur validit√©
      const anonDecoded = JSON.parse(atob(anonKey.split('.')[1]))
      const serviceDecoded = JSON.parse(atob(serviceKey.split('.')[1]))
      
      console.log(`‚úÖ Token anon - R√¥le: ${anonDecoded.role}, Expire: ${new Date(anonDecoded.exp * 1000).toLocaleString()}`)
      console.log(`‚úÖ Token service - R√¥le: ${serviceDecoded.role}, Expire: ${new Date(serviceDecoded.exp * 1000).toLocaleString()}`)
      
      // V√©rifier l'expiration
      const now = Math.floor(Date.now() / 1000)
      if (anonDecoded.exp < now) {
        console.log('‚ùå Token anonyme EXPIR√â !')
        allVarsValid = false
      }
      if (serviceDecoded.exp < now) {
        console.log('‚ùå Token service EXPIR√â !')
        allVarsValid = false
      }
      
    } catch (err) {
      console.log(`‚ùå Erreur d√©codage JWT: ${err.message}`)
      allVarsValid = false
    }

    // Test de connexion r√©elle
    console.log('\nüîó Test de connexion Supabase...')
    
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    )
    
    const { data, error } = await supabase
      .from('users')
      .select('count(*)', { count: 'exact', head: true })
    
    if (error) {
      console.log(`‚ùå Erreur connexion: ${error.message}`)
      console.log(`üìä Code: ${error.code}`)
      console.log(`üí° Hint: ${error.hint}`)
      allVarsValid = false
    } else {
      console.log('‚úÖ Connexion Supabase r√©ussie !')
    }

    console.log('\n============================================================')
    console.log('üìã 4. R√âSUM√â ET RECOMMANDATIONS')
    console.log('============================================================')
    
    if (allVarsValid) {
      console.log('üéâ Votre fichier .env.local est VALIDE !')
      console.log('‚úÖ Toutes les cl√©s fonctionnent correctement')
      console.log('üöÄ Le probl√®me vient probablement d\'ailleurs')
    } else {
      console.log('‚ùå Votre fichier .env.local a des PROBL√àMES')
      console.log('')
      console.log('üîß SOLUTIONS POSSIBLES :')
      console.log('1. V√©rifiez vos cl√©s dans le dashboard Supabase')
      console.log('2. R√©g√©n√©rez les cl√©s si n√©cessaire')
      console.log('3. Supprimez les espaces en d√©but/fin de ligne')
      console.log('4. V√©rifiez qu\'il n\'y a pas de lignes vides au milieu')
      console.log('')
      console.log('üåê Dashboard Supabase : https://supabase.com/dashboard')
    }

  } catch (error) {
    console.error('‚ùå Erreur validation:', error.message)
    process.exit(1)
  }
}

main()