const https = require('https')
const http = require('http')

// Configuration
const API_BASE = 'http://localhost:3000'

// Fonction pour faire des requ√™tes HTTP
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url)
    const isHttps = urlObj.protocol === 'https:'
    const client = isHttps ? https : http
    
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || (isHttps ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: options.headers || {}
    }
    
    const req = client.request(requestOptions, (res) => {
      let data = ''
      res.on('data', (chunk) => {
        data += chunk
      })
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data
        })
      })
    })
    
    req.on('error', (error) => {
      reject(error)
    })
    
    if (options.body) {
      req.write(options.body)
    }
    
    req.end()
  })
}

async function testAPI() {
  console.log('üîç Test direct de l\'API de votre application...\n')
  
  try {
    // 1. Test de l'endpoint principal
    console.log('1Ô∏è‚É£ Test de l\'endpoint principal /')
    const mainResponse = await makeRequest(`${API_BASE}/`)
    console.log(`   Status: ${mainResponse.statusCode}`)
    console.log(`   Content-Type: ${mainResponse.headers['content-type']}`)
    console.log(`   Taille: ${mainResponse.data.length} caract√®res`)
    console.log()
    
    // 2. Test de l'endpoint de debug (sans authentification)
    console.log('2Ô∏è‚É£ Test de l\'endpoint de debug /api/share-company/debug')
    const debugResponse = await makeRequest(`${API_BASE}/api/share-company/debug`)
    console.log(`   Status: ${debugResponse.statusCode}`)
    console.log(`   R√©ponse: ${debugResponse.data.substring(0, 100)}...`)
    console.log()
    
    // 3. Test de l'endpoint share-company (sans authentification)
    console.log('3Ô∏è‚É£ Test de l\'endpoint share-company /api/share-company')
    const shareResponse = await makeRequest(`${API_BASE}/api/share-company`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        companyId: 'test',
        email: 'test@example.com',
        role: 'MEMBER'
      })
    })
    console.log(`   Status: ${shareResponse.statusCode}`)
    console.log(`   R√©ponse: ${shareResponse.data}`)
    console.log()
    
    // 4. Test avec un token d'authentification factice
    console.log('4Ô∏è‚É£ Test avec un token d\'authentification factice')
    const fakeAuthResponse = await makeRequest(`${API_BASE}/api/share-company`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer fake-token-123'
      },
      body: JSON.stringify({
        companyId: 'test',
        email: 'test@example.com',
        role: 'MEMBER'
      })
    })
    console.log(`   Status: ${fakeAuthResponse.statusCode}`)
    console.log(`   R√©ponse: ${fakeAuthResponse.data}`)
    console.log()
    
    // 5. V√©rifier les logs du serveur
    console.log('5Ô∏è‚É£ V√©rification des logs du serveur...')
    console.log('   Ouvrez votre terminal Cursor et regardez les logs de npm run dev')
    console.log('   Vous devriez voir des erreurs d√©taill√©es lors des tests ci-dessus')
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message)
  }
}

testAPI()
