const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !serviceRoleKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, serviceRoleKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function executeUploadFix() {
  console.log('üîß CORRECTION UPLOAD SUPABASE');
  console.log('==============================');

  try {
    // 1. V√©rifier que le bucket existe
    console.log('üìã 1. V√©rification du bucket...');
    const { data: bucketData, error: bucketError } = await supabase
      .from('storage.buckets')
      .select('*')
      .eq('name', 'company-files')
      .single();

    if (bucketError && bucketError.code !== 'PGRST116') {
      console.log('‚ùå Erreur lors de la v√©rification du bucket:', bucketError.message);
    } else if (bucketData) {
      console.log('‚úÖ Bucket "company-files" existe d√©j√†');
    } else {
      console.log('üì¶ Cr√©ation du bucket "company-files"...');
      // Note: La cr√©ation de bucket via API est limit√©e, on va utiliser SQL
    }

    // 2. V√©rifier la table documents
    console.log('üìã 2. V√©rification de la table documents...');
    const { data: tableData, error: tableError } = await supabase
      .from('documents')
      .select('*')
      .limit(1);

    if (tableError) {
      console.log('‚ùå Erreur table documents:', tableError.message);
    } else {
      console.log('‚úÖ Table documents accessible');
    }

    // 3. Ex√©cuter le script SQL complet
    console.log('üìã 3. Ex√©cution du script SQL...');
    
    const sqlScript = `
      -- Cr√©er le bucket s'il n'existe pas
      INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
      VALUES (
        gen_random_uuid(),
        'company-files',
        false,
        52428800,
        ARRAY[
          'application/pdf',
          'application/msword',
          'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
          'application/vnd.ms-excel',
          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
          'image/jpeg',
          'image/jpg',
          'image/png',
          'image/gif',
          'image/webp'
        ]
      )
      ON CONFLICT (name) DO NOTHING;

      -- D√©sactiver RLS sur documents
      ALTER TABLE documents DISABLE ROW LEVEL SECURITY;

      -- Donner les permissions
      GRANT ALL ON documents TO authenticated;
      GRANT ALL ON documents TO anon;

      -- Cr√©er l'index
      CREATE INDEX IF NOT EXISTS idx_documents_company_id ON documents(company_id);
    `;

    const { error: sqlError } = await supabase.rpc('exec_sql', { sql: sqlScript });
    
    if (sqlError) {
      console.log('‚ö†Ô∏è  Erreur SQL (normal si exec_sql n\'existe pas):', sqlError.message);
      console.log('üìù Le script doit √™tre ex√©cut√© manuellement dans Supabase Dashboard');
    } else {
      console.log('‚úÖ Script SQL ex√©cut√© avec succ√®s');
    }

    // 4. Test d'upload simple
    console.log('üìã 4. Test d\'upload...');
    const testFile = new Blob(['Test upload'], { type: 'text/plain' });
    const fileName = `test-${Date.now()}.txt`;
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('company-files')
      .upload(`test/${fileName}`, testFile);

    if (uploadError) {
      console.log('‚ùå Erreur upload:', uploadError.message);
      console.log('üí° Solution: Configurez le bucket en public ou ajoutez des politiques RLS');
    } else {
      console.log('‚úÖ Upload r√©ussi!');
      
      // Nettoyer le fichier de test
      await supabase.storage
        .from('company-files')
        .remove([`test/${fileName}`]);
      console.log('üßπ Fichier de test supprim√©');
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }

  console.log('\nüìã R√âCAPITULATIF:');
  console.log('1. ‚úÖ V√©rifications effectu√©es');
  console.log('2. ‚ö†Ô∏è  Script SQL √† ex√©cuter manuellement');
  console.log('3. üí° Configuration bucket n√©cessaire');
  
  console.log('\nüéØ PROCHAINES √âTAPES:');
  console.log('1. Allez sur Supabase Dashboard > SQL Editor');
  console.log('2. Ex√©cutez le contenu de CORRECTION-UPLOAD-SIMPLE.sql');
  console.log('3. Configurez le bucket en public temporairement');
  console.log('4. Testez l\'upload dans l\'application');
}

executeUploadFix(); 