const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

console.log('üîß Configuration Supabase:')
console.log('URL:', supabaseUrl)
console.log('Anon Key:', supabaseAnonKey ? 'Pr√©sent' : 'Manquant')

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement manquantes!')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function debugAuthSession() {
  console.log('\nüîç DIAGNOSTIC AUTHENTIFICATION')
  console.log('================================')

  try {
    // Test 1: getUser()
    console.log('\nüì• Test 1: getUser()')
    const userResult = await supabase.auth.getUser()
    console.log('R√©sultat:', JSON.stringify(userResult, null, 2))
    
    if (userResult.data.user) {
      console.log('‚úÖ Utilisateur trouv√©:', userResult.data.user.email)
    } else {
      console.log('‚ùå Aucun utilisateur trouv√©')
    }

    // Test 2: getSession()
    console.log('\nüì• Test 2: getSession()')
    const sessionResult = await supabase.auth.getSession()
    console.log('R√©sultat:', JSON.stringify(sessionResult, null, 2))
    
    if (sessionResult.data.session) {
      console.log('‚úÖ Session trouv√©e:', sessionResult.data.session.user.email)
    } else {
      console.log('‚ùå Aucune session trouv√©e')
    }

    // Test 3: Lister tous les utilisateurs (pour v√©rifier que la connexion fonctionne)
    console.log('\nüì• Test 3: V√©rification connexion DB')
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('email')
      .limit(1)
    
    if (usersError) {
      console.log('‚ùå Erreur connexion DB:', usersError.message)
    } else {
      console.log('‚úÖ Connexion DB OK, utilisateurs trouv√©s:', users.length)
    }

    // Test 4: V√©rifier les invitations
    console.log('\nüì• Test 4: V√©rification invitations')
    const { data: invitations, error: invitationsError } = await supabase
      .from('invitations')
      .select('*')
      .limit(1)
    
    if (invitationsError) {
      console.log('‚ùå Erreur invitations:', invitationsError.message)
    } else {
      console.log('‚úÖ Invitations trouv√©es:', invitations.length)
    }

    // Test 5: Test RPC get_invitation_by_token
    console.log('\nüì• Test 5: Test RPC get_invitation_by_token')
    const token = 'gatyP89dwM03o6wki4Er6lxZjFgsqYIPdN2NI-ke2fg'
    const { data: invitationData, error: rpcError } = await supabase.rpc('get_invitation_by_token', { 
      token_param: token 
    })
    
    if (rpcError) {
      console.log('‚ùå Erreur RPC:', rpcError.message)
    } else {
      console.log('‚úÖ RPC OK, invitation trouv√©e:', invitationData.length > 0)
      if (invitationData.length > 0) {
        console.log('   Email invit√©:', invitationData[0].invited_email)
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
  }
}

debugAuthSession() 