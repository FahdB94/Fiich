#!/usr/bin/env node

/**
 * Script pour v√©rifier le statut de la fonction notify_shared_users
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function checkFunctionStatus() {
  console.log('üîç V√©rification du statut de la fonction notify_shared_users')
  console.log('==========================================================\n')

  try {
    // 1. R√©cup√©rer une entreprise avec son propri√©taire
    console.log('1Ô∏è‚É£ R√©cup√©ration d\'une entreprise...')
    
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select(`
        id,
        company_name,
        user_id
      `)
      .limit(1)

    if (companiesError || !companies || companies.length === 0) {
      console.error('‚ùå Aucune entreprise trouv√©e:', companiesError?.message)
      return
    }

    const testCompany = companies[0]
    console.log('‚úÖ Entreprise trouv√©e:', testCompany.company_name)
    console.log('üë§ Propri√©taire ID:', testCompany.user_id)

    // 2. R√©cup√©rer les partages
    console.log('\n2Ô∏è‚É£ R√©cup√©ration des partages...')
    
    const { data: shares, error: sharesError } = await supabase
      .from('company_shares')
      .select('*')
      .eq('company_id', testCompany.id)
      .eq('is_active', true)

    if (sharesError) {
      console.error('‚ùå Erreur r√©cup√©ration partages:', sharesError.message)
      return
    }

    console.log('üìä Partages trouv√©s:', shares.length)
    shares.forEach((share, index) => {
      console.log(`   ${index + 1}. ${share.shared_with_email} (actif: ${share.is_active})`)
    })

    // 3. Tester la fonction avec des donn√©es de debug
    console.log('\n3Ô∏è‚É£ Test de la fonction avec debug...')
    
    // Cr√©er une notification de test avec un titre unique
    const testTitle = `Debug Test ${Date.now()}`
    const testNotification = {
      p_company_id: testCompany.id,
      p_notification_type: 'company_updated',
      p_title: testTitle,
      p_message: 'Test de debug pour v√©rifier l\'exclusion du propri√©taire.',
      p_metadata: { debug: true, timestamp: Date.now() }
    }

    console.log('üìã Param√®tres de test:')
    console.log('   - Company ID:', testNotification.p_company_id)
    console.log('   - Title:', testNotification.p_title)
    console.log('   - Type:', testNotification.p_notification_type)

    const { data: rpcResult, error: rpcError } = await supabase.rpc('notify_shared_users', testNotification)

    if (rpcError) {
      console.error('‚ùå Erreur fonction RPC:', rpcError.message)
      console.error('Code:', rpcError.code)
      console.error('Details:', rpcError.details)
      return
    }

    console.log('‚úÖ Fonction RPC ex√©cut√©e avec succ√®s')

    // 4. V√©rifier les notifications cr√©√©es
    console.log('\n4Ô∏è‚É£ V√©rification des notifications cr√©√©es...')
    
    const { data: notifications, error: notificationsError } = await supabase
      .from('notifications')
      .select('*')
      .eq('company_id', testCompany.id)
      .eq('title', testTitle)
      .order('created_at', { ascending: false })

    if (notificationsError) {
      console.error('‚ùå Erreur r√©cup√©ration notifications:', notificationsError.message)
      return
    }

    console.log('üìä Notifications cr√©√©es:', notifications.length)
    
    if (notifications.length > 0) {
      console.log('üìã D√©tails des notifications:')
      notifications.forEach((notification, index) => {
        console.log(`   ${index + 1}. ${notification.recipient_email}`)
        console.log(`      - ID: ${notification.id}`)
        console.log(`      - Type: ${notification.notification_type}`)
        console.log(`      - Cr√©√©e: ${notification.created_at}`)
        console.log(`      - Lue: ${notification.is_read}`)
      })
    }

    // 5. Analyser le probl√®me
    console.log('\n5Ô∏è‚É£ Analyse du probl√®me...')
    
    if (notifications.length > 0) {
      const recipientEmails = notifications.map(n => n.recipient_email)
      console.log('üìß Emails notifi√©s:', recipientEmails)
      
      // V√©rifier si le propri√©taire a √©t√© notifi√©
      // Pour cela, on va essayer de r√©cup√©rer l'email du propri√©taire
      console.log('\nüîç Tentative de r√©cup√©ration de l\'email du propri√©taire...')
      
      // On va utiliser une approche diff√©rente : regarder les partages
      // Si l'utilisateur partag√© est le m√™me que le propri√©taire, c'est le probl√®me
      const ownerEmail = shares.find(share => share.shared_with_email)?.shared_with_email
      
      if (ownerEmail && recipientEmails.includes(ownerEmail)) {
        console.error('‚ùå PROBL√àME IDENTIFI√â: Le propri√©taire re√ßoit encore des notifications!')
        console.error('   Email du propri√©taire:', ownerEmail)
        console.error('   La fonction n\'a pas √©t√© mise √† jour ou il y a un bug')
      } else {
        console.log('‚úÖ Le propri√©taire ne semble pas avoir √©t√© notifi√©')
        console.log('   Emails notifi√©s:', recipientEmails)
      }
    }

    // 6. Nettoyer les notifications de test
    console.log('\n6Ô∏è‚É£ Nettoyage des notifications de test...')
    
    if (notifications.length > 0) {
      const { error: deleteError } = await supabase
        .from('notifications')
        .delete()
        .in('id', notifications.map(n => n.id))

      if (deleteError) {
        console.error('‚ùå Erreur suppression notifications:', deleteError.message)
      } else {
        console.log('‚úÖ Notifications de test supprim√©es')
      }
    }

    // 7. Recommandations
    console.log('\nüìã Recommandations:')
    console.log('1. V√©rifiez que CORRECTION-FONCTION-SEULE.sql a √©t√© ex√©cut√©')
    console.log('2. V√©rifiez que la fonction a bien √©t√© mise √† jour')
    console.log('3. Testez avec une vraie modification d\'entreprise')
    console.log('4. V√©rifiez les logs de la base de donn√©es')

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error)
  }
}

// Ex√©cuter la v√©rification
checkFunctionStatus() 