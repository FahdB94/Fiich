#!/usr/bin/env node

/**
 * V√©rification de l'email de l'invitation
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function checkInvitationEmail() {
  console.log('üîç V√©rification de l\'email de l\'invitation')
  console.log('==========================================\n')

  try {
    // 1. R√©cup√©rer l'invitation par token
    console.log('1Ô∏è‚É£ R√©cup√©ration de l\'invitation par token...')
    
    const invitationToken = 'gatyP89dwM03o6wki4Er6lxZjFgsqYIPdN2NI-ke2fg'
    
    const { data: invitation, error: invitationError } = await supabase.rpc('get_invitation_by_token', {
      token_param: invitationToken
    })

    if (invitationError) {
      console.error('‚ùå Erreur r√©cup√©ration invitation:', invitationError.message)
      return
    }

    if (!invitation || invitation.length === 0) {
      console.log('‚ùå Invitation non trouv√©e')
      return
    }

    const invitationData = invitation[0]
    console.log('‚úÖ Invitation trouv√©e:')
    console.log(`   ID: ${invitationData.id}`)
    console.log(`   Token: ${invitationData.invitation_token}`)
    console.log(`   Email invit√©: ${invitationData.invited_email}`)
    console.log(`   Entreprise: ${invitationData.company_name}`)
    console.log(`   Invit√© par: ${invitationData.invited_by_email}`)
    console.log(`   Expire le: ${invitationData.expires_at}`)

    // 2. V√©rifier si l'invitation est expir√©e
    console.log('\n2Ô∏è‚É£ V√©rification de l\'expiration...')
    
    const isExpired = new Date(invitationData.expires_at) < new Date()
    console.log(`   Expir√©e: ${isExpired ? '‚ùå Oui' : '‚úÖ Non'}`)
    
    if (isExpired) {
      console.log('‚ö†Ô∏è  L\'invitation a expir√© !')
      return
    }

    // 3. V√©rifier les utilisateurs avec cet email
    console.log('\n3Ô∏è‚É£ V√©rification des utilisateurs avec cet email...')
    
    const { data: users, error: usersError } = await supabase.auth.admin.listUsers()

    if (usersError) {
      console.error('‚ùå Erreur r√©cup√©ration utilisateurs:', usersError.message)
      return
    }

    const matchingUsers = users.users.filter(user => user.email === invitationData.invited_email)
    
    console.log(`   Utilisateurs trouv√©s avec l'email ${invitationData.invited_email}: ${matchingUsers.length}`)
    
    if (matchingUsers.length > 0) {
      matchingUsers.forEach((user, index) => {
        console.log(`   ${index + 1}. ID: ${user.id}`)
        console.log(`      Email: ${user.email}`)
        console.log(`      Cr√©√© le: ${user.created_at}`)
        console.log(`      Derni√®re connexion: ${user.last_sign_in_at || 'Jamais'}`)
      })
    } else {
      console.log('   ‚ÑπÔ∏è  Aucun utilisateur trouv√© avec cet email')
    }

    // 4. Recommandations
    console.log('\nüìã Recommandations:')
    console.log(`   Email de l'invitation: ${invitationData.invited_email}`)
    
    if (matchingUsers.length > 0) {
      console.log('   ‚úÖ Un compte existe avec cet email')
      console.log('   üí° Connectez-vous avec cet email pour acc√©der √† l\'invitation')
    } else {
      console.log('   ‚ùå Aucun compte avec cet email')
      console.log('   üí° Cr√©ez un compte avec cet email ou demandez une nouvelle invitation')
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error)
  }
}

// Ex√©cuter la v√©rification
checkInvitationEmail() 