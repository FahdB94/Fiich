#!/usr/bin/env node

/**
 * Script de test pour le syst√®me de notifications
 * Teste la cr√©ation de notifications et d'invitations
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes')
  console.error('NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl)
  console.error('SUPABASE_SERVICE_ROLE_KEY:', !!supabaseServiceKey)
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function testNotifications() {
  console.log('üß™ Test du syst√®me de notifications')
  console.log('=====================================\n')

  try {
    // 1. V√©rifier la configuration Supabase
    console.log('1Ô∏è‚É£ V√©rification de la configuration...')
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    
    if (authError) {
      console.log('‚ö†Ô∏è  Pas d\'utilisateur connect√©, utilisation du service role')
    } else {
      console.log('‚úÖ Utilisateur connect√©:', user.email)
    }

    // 2. V√©rifier l'existence des tables
    console.log('\n2Ô∏è‚É£ V√©rification des tables...')
    
    const { data: notificationsTable, error: notificationsError } = await supabase
      .from('notifications')
      .select('count')
      .limit(1)
    
    if (notificationsError) {
      console.error('‚ùå Table notifications non accessible:', notificationsError.message)
    } else {
      console.log('‚úÖ Table notifications accessible')
    }

    const { data: invitationsTable, error: invitationsError } = await supabase
      .from('invitations')
      .select('count')
      .limit(1)
    
    if (invitationsError) {
      console.error('‚ùå Table invitations non accessible:', invitationsError.message)
    } else {
      console.log('‚úÖ Table invitations accessible')
    }

    // 3. R√©cup√©rer une entreprise existante
    console.log('\n3Ô∏è‚É£ R√©cup√©ration d\'une entreprise...')
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('id, company_name')
      .limit(1)

    if (companiesError || !companies || companies.length === 0) {
      console.error('‚ùå Aucune entreprise trouv√©e:', companiesError?.message)
      return
    }

    const testCompany = companies[0]
    console.log('‚úÖ Entreprise trouv√©e:', testCompany.company_name)

    // 4. Cr√©er une notification de test
    console.log('\n4Ô∏è‚É£ Cr√©ation d\'une notification de test...')
    const testNotification = {
      recipient_email: 'test@example.com',
      company_id: testCompany.id,
      notification_type: 'company_updated',
      title: 'Test - Fiche d\'entreprise mise √† jour',
      message: 'Test - La fiche de l\'entreprise a √©t√© mise √† jour pour les tests.',
      metadata: {
        company_name: testCompany.company_name,
        updated_fields: {
          company_name: false,
          siren: true,
          address: false
        }
      }
    }

    const { data: newNotification, error: notificationError } = await supabase
      .from('notifications')
      .insert(testNotification)
      .select()

    if (notificationError) {
      console.error('‚ùå Erreur cr√©ation notification:', notificationError.message)
    } else {
      console.log('‚úÖ Notification cr√©√©e:', newNotification[0].id)
    }

    // 5. Cr√©er une invitation de test
    console.log('\n5Ô∏è‚É£ Cr√©ation d\'une invitation de test...')
    const testInvitation = {
      company_id: testCompany.id,
      invited_email: 'invite@example.com',
      invited_by: '00000000-0000-0000-0000-000000000000', // UUID factice
      invitation_token: 'test-token-' + Date.now(),
      expires_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // +7 jours
    }

    const { data: newInvitation, error: invitationError } = await supabase
      .from('invitations')
      .insert(testInvitation)
      .select()

    if (invitationError) {
      console.error('‚ùå Erreur cr√©ation invitation:', invitationError.message)
    } else {
      console.log('‚úÖ Invitation cr√©√©e:', newInvitation[0].id)
    }

    // 6. Tester les fonctions RPC
    console.log('\n6Ô∏è‚É£ Test des fonctions RPC...')
    
    // Test de la fonction create_notification
    const { data: rpcNotification, error: rpcError } = await supabase.rpc('create_notification', {
      p_recipient_email: 'test@example.com',
      p_company_id: testCompany.id,
      p_notification_type: 'document_added',
      p_title: 'Test RPC - Nouveau document',
      p_message: 'Test RPC - Un nouveau document a √©t√© ajout√©.',
      p_metadata: { document_name: 'test.pdf' }
    })

    if (rpcError) {
      console.error('‚ùå Erreur fonction RPC:', rpcError.message)
    } else {
      console.log('‚úÖ Fonction RPC create_notification fonctionne')
    }

    // 7. V√©rifier les triggers
    console.log('\n7Ô∏è‚É£ Test des triggers...')
    console.log('‚ÑπÔ∏è  Les triggers seront test√©s lors de modifications r√©elles')
    console.log('   - Modifiez une entreprise partag√©e')
    console.log('   - Ajoutez/supprimez un document public')
    console.log('   - V√©rifiez les notifications automatiques')

    // 8. Nettoyer les donn√©es de test
    console.log('\n8Ô∏è‚É£ Nettoyage des donn√©es de test...')
    
    if (newNotification) {
      await supabase
        .from('notifications')
        .delete()
        .eq('id', newNotification[0].id)
      console.log('‚úÖ Notification de test supprim√©e')
    }

    if (newInvitation) {
      await supabase
        .from('invitations')
        .delete()
        .eq('id', newInvitation[0].id)
      console.log('‚úÖ Invitation de test supprim√©e')
    }

    console.log('\nüéâ Test termin√© avec succ√®s !')
    console.log('\nüìã Prochaines √©tapes :')
    console.log('1. Ex√©cutez le script SQL CREATION-TABLE-NOTIFICATIONS.sql')
    console.log('2. Testez les modifications d\'entreprises partag√©es')
    console.log('3. V√©rifiez la cloche de notifications dans l\'interface')

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  }
}

// Ex√©cuter le test
testNotifications() 