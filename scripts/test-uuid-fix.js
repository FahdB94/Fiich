#!/usr/bin/env node

/**
 * Test de la correction de l'UUID
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

// Fonction pour extraire l'ID comme dans le hook corrig√©
function extractId(notificationId) {
  const type = notificationId.startsWith('notification-') ? 'notification' : 
               notificationId.startsWith('invitation-') ? 'invitation' : null
  const id = type ? notificationId.substring(type.length + 1) : notificationId
  return { type, id }
}

async function testUUIDFix() {
  console.log('üß™ Test de la correction de l\'UUID')
  console.log('===================================\n')

  try {
    // 1. R√©cup√©rer une notification existante
    console.log('1Ô∏è‚É£ R√©cup√©ration d\'une notification existante...')
    
    const { data: notifications, error: notificationsError } = await supabase
      .from('notifications')
      .select('id, title')
      .limit(1)

    if (notificationsError || !notifications || notifications.length === 0) {
      console.error('‚ùå Aucune notification trouv√©e:', notificationsError?.message)
      return
    }

    const notification = notifications[0]
    console.log('‚úÖ Notification trouv√©e:')
    console.log(`   ID original: ${notification.id}`)
    console.log(`   Titre: ${notification.title}`)

    // 2. Simuler l'ID unifi√© comme dans le frontend
    const unifiedId = `notification-${notification.id}`
    console.log(`   ID unifi√©: ${unifiedId}`)

    // 3. Tester l'extraction de l'ID
    console.log('\n2Ô∏è‚É£ Test de l\'extraction de l\'ID...')
    
    const { type, id } = extractId(unifiedId)
    console.log(`   Type extrait: ${type}`)
    console.log(`   ID extrait: ${id}`)
    console.log(`   ID original: ${notification.id}`)
    console.log(`   Correspondance: ${id === notification.id ? '‚úÖ OK' : '‚ùå ERREUR'}`)

    // 4. Tester la mise √† jour avec l'ID extrait
    console.log('\n3Ô∏è‚É£ Test de mise √† jour avec l\'ID extrait...')
    
    const { data: updatedNotification, error: updateError } = await supabase
      .from('notifications')
      .update({ is_read: false })
      .eq('id', id)
      .select()
      .single()

    if (updateError) {
      console.error('‚ùå Erreur mise √† jour:', updateError.message)
      console.error('   Code:', updateError.code)
    } else {
      console.log('‚úÖ Mise √† jour r√©ussie avec l\'ID extrait')
      console.log(`   Lu: ${updatedNotification.is_read}`)
    }

    // 5. Tester la suppression avec l'ID extrait
    console.log('\n4Ô∏è‚É£ Test de suppression avec l\'ID extrait...')
    
    const { error: deleteError } = await supabase
      .from('notifications')
      .delete()
      .eq('id', id)

    if (deleteError) {
      console.error('‚ùå Erreur suppression:', deleteError.message)
      console.error('   Code:', deleteError.code)
    } else {
      console.log('‚úÖ Suppression r√©ussie avec l\'ID extrait')
    }

    // 6. V√©rifier que la suppression a fonctionn√©
    console.log('\n5Ô∏è‚É£ V√©rification de la suppression...')
    
    const { data: checkNotification, error: checkError } = await supabase
      .from('notifications')
      .select('*')
      .eq('id', id)
      .single()

    if (checkError && checkError.code === 'PGRST116') {
      console.log('‚úÖ Notification bien supprim√©e (non trouv√©e)')
    } else if (checkError) {
      console.error('‚ùå Erreur v√©rification:', checkError.message)
    } else {
      console.log('‚ö†Ô∏è  Notification encore pr√©sente apr√®s suppression')
    }

    // 7. Test avec l'ancienne m√©thode (pour comparaison)
    console.log('\n6Ô∏è‚É£ Test avec l\'ancienne m√©thode (split)...')
    
    const oldMethod = unifiedId.split('-')
    console.log(`   Ancienne m√©thode: type="${oldMethod[0]}", id="${oldMethod[1]}"`)
    console.log(`   ID tronqu√©: ${oldMethod[1]}`)
    console.log(`   UUID complet: ${notification.id}`)
    console.log(`   Probl√®me: ${oldMethod[1] !== notification.id ? '‚úÖ Identifi√©' : '‚ùå Non identifi√©'}`)

    // 8. R√©sum√© final
    console.log('\nüìã R√©sum√© du test:')
    console.log(`- Extraction correcte: ${id === notification.id ? '‚úÖ OK' : '‚ùå √âCHEC'}`)
    console.log(`- Mise √† jour: ${updateError ? '‚ùå √âCHEC' : '‚úÖ OK'}`)
    console.log(`- Suppression: ${deleteError ? '‚ùå √âCHEC' : '‚úÖ OK'}`)
    console.log(`- Ancienne m√©thode probl√©matique: ‚úÖ Identifi√©e`)

    if (id === notification.id && !updateError && !deleteError) {
      console.log('\nüéâ CORRECTION R√âUSSIE !')
      console.log('üí° L\'extraction d\'UUID fonctionne maintenant correctement')
      console.log('üöÄ Les notifications devraient fonctionner dans l\'interface')
    } else {
      console.log('\n‚ö†Ô∏è  PROBL√àME PERSISTANT !')
      console.log('üîß V√©rifiez la logique d\'extraction dans le hook')
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  }
}

// Ex√©cuter le test
testUUIDFix() 