const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function diagnosticPartageDocuments() {
  console.log('üîç Diagnostic des probl√®mes de partage de documents...\n')

  try {
    // =====================================================
    // 1. ANALYSE DES DOCUMENTS ET PERMISSIONS
    // =====================================================
    console.log('üìã 1. ANALYSE DES DOCUMENTS ET PERMISSIONS')
    console.log('==========================================')

    // 1.1 R√©cup√©rer tous les documents
    console.log('\nüìÑ 1.1 R√©cup√©ration de tous les documents...')
    const { data: documents, error: docsError } = await supabase
      .from('documents')
      .select('*')
      .order('created_at', { ascending: false })

    if (docsError) {
      console.error('‚ùå Erreur r√©cup√©ration documents:', docsError)
      return
    }

    console.log(`‚úÖ ${documents.length} documents trouv√©s`)
    documents.forEach((doc, index) => {
      console.log(`   ${index + 1}. ${doc.name}`)
      console.log(`      - ID: ${doc.id}`)
      console.log(`      - Chemin: ${doc.file_path}`)
      console.log(`      - Entreprise: ${doc.company_id}`)
      console.log(`      - Public: ${doc.is_public}`)
      console.log(`      - Type: ${doc.document_type}`)
      console.log('')
    })

    // 1.2 Analyser les permissions de partage
    console.log('\nüîê 1.2 Analyse des permissions de partage...')
    
    // V√©rifier les politiques RLS sur les documents
    const { data: rlsPolicies, error: rlsError } = await supabase
      .rpc('get_rls_policies', { table_name: 'documents' })
      .catch(() => ({ data: null, error: 'Fonction non disponible' }))

    if (rlsError) {
      console.log('‚ÑπÔ∏è  Impossible de v√©rifier les politiques RLS directement')
    } else {
      console.log(`‚úÖ Politiques RLS trouv√©es: ${rlsPolicies?.length || 0}`)
    }

    // =====================================================
    // 2. ANALYSE DES FICHIERS DANS LE STORAGE
    // =====================================================
    console.log('\nüìÅ 2. ANALYSE DES FICHIERS DANS LE STORAGE')
    console.log('==========================================')

    // 2.1 Lister tous les fichiers dans le storage
    console.log('\nüìã 2.1 Liste des fichiers dans le storage...')
    const { data: storageFiles, error: storageError } = await supabase.storage
      .from('company-files')
      .list('documents', {
        limit: 1000,
        offset: 0
      })

    if (storageError) {
      console.error('‚ùå Erreur r√©cup√©ration storage:', storageError)
      return
    }

    console.log(`‚úÖ ${storageFiles.length} √©l√©ments dans le storage`)
    storageFiles.forEach((file, index) => {
      console.log(`   ${index + 1}. ${file.name}`)
      console.log(`      - Taille: ${file.metadata?.size || 0} bytes`)
      console.log(`      - Cr√©√©: ${file.created_at}`)
      console.log(`      - Mis √† jour: ${file.updated_at}`)
      console.log('')
    })

    // 2.2 V√©rifier l'accessibilit√© des fichiers
    console.log('\nüîç 2.2 Test d\'accessibilit√© des fichiers...')
    
    for (const doc of documents) {
      console.log(`\nüìÑ Test d'accessibilit√© pour: ${doc.name}`)
      
      const fullPath = `documents/${doc.file_path}`
      console.log(`   - Chemin complet: ${fullPath}`)
      
      // Test 1: V√©rifier l'existence du fichier
      try {
        const { data: fileExists, error: existsError } = await supabase.storage
          .from('company-files')
          .list(`documents/${doc.company_id}`, { limit: 1000, offset: 0 })

        if (existsError) {
          console.log(`   ‚ùå Erreur v√©rification existence: ${existsError.message}`)
          continue
        }

        const fileName = doc.file_path.split('/').pop()
        const exists = fileExists.some(file => file.name === fileName)
        console.log(`   - Existe en storage: ${exists}`)

        if (!exists) {
          console.log(`   ‚ùå FICHIER MANQUANT: ${doc.name} n'existe pas en storage`)
          continue
        }

        // Test 2: Tenter de cr√©er une URL sign√©e
        try {
          const { data: signedUrl, error: urlError } = await supabase.storage
            .from('company-files')
            .createSignedUrl(fullPath, 60)

          if (urlError) {
            console.log(`   ‚ùå Erreur cr√©ation URL sign√©e: ${urlError.message}`)
            console.log(`   ‚ùå Code d'erreur: ${urlError.statusCode || 'N/A'}`)
          } else {
            console.log(`   ‚úÖ URL sign√©e cr√©√©e avec succ√®s`)
            console.log(`   - URL: ${signedUrl.signedUrl.substring(0, 100)}...`)
          }
        } catch (urlError) {
          console.log(`   ‚ùå Exception lors de la cr√©ation d'URL: ${urlError.message}`)
        }

        // Test 3: Tenter d'obtenir l'URL publique
        try {
          const { data: publicUrl, error: publicError } = await supabase.storage
            .from('company-files')
            .getPublicUrl(fullPath)

          if (publicError) {
            console.log(`   ‚ùå Erreur URL publique: ${publicError.message}`)
          } else {
            console.log(`   ‚úÖ URL publique disponible`)
            console.log(`   - URL: ${publicUrl.publicUrl.substring(0, 100)}...`)
          }
        } catch (publicError) {
          console.log(`   ‚ùå Exception URL publique: ${publicError.message}`)
        }

      } catch (error) {
        console.log(`   ‚ùå Erreur g√©n√©rale: ${error.message}`)
      }
    }

    // =====================================================
    // 3. ANALYSE DES PARTAGES ET INVITATIONS
    // =====================================================
    console.log('\nü§ù 3. ANALYSE DES PARTAGES ET INVITATIONS')
    console.log('==========================================')

    // 3.1 V√©rifier les partages d'entreprises
    console.log('\nüìã 3.1 Partages d\'entreprises...')
    const { data: companyShares, error: sharesError } = await supabase
      .from('company_shares')
      .select('*')

    if (sharesError) {
      console.log('‚ÑπÔ∏è  Table company_shares non accessible ou inexistante')
    } else {
      console.log(`‚úÖ ${companyShares.length} partages d'entreprises trouv√©s`)
      companyShares.forEach((share, index) => {
        console.log(`   ${index + 1}. Entreprise: ${share.company_id}`)
        console.log(`      - Partag√© avec: ${share.shared_with_email}`)
        console.log(`      - Cr√©√©: ${share.created_at}`)
        console.log(`      - Actif: ${share.is_active}`)
        console.log('')
      })
    }

    // 3.2 V√©rifier les invitations
    console.log('\nüìß 3.2 Invitations...')
    const { data: invitations, error: invitationsError } = await supabase
      .from('invitations')
      .select('*')

    if (invitationsError) {
      console.log('‚ÑπÔ∏è  Table invitations non accessible ou inexistante')
    } else {
      console.log(`‚úÖ ${invitations.length} invitations trouv√©es`)
      invitations.forEach((inv, index) => {
        console.log(`   ${index + 1}. ${inv.email}`)
        console.log(`      - Entreprise: ${inv.company_id}`)
        console.log(`      - Statut: ${inv.status}`)
        console.log(`      - Cr√©√©: ${inv.created_at}`)
        console.log('')
      })
    }

    // =====================================================
    // 4. TEST DE SIMULATION D'ACC√àS PARTAG√â
    // =====================================================
    console.log('\nüß™ 4. TEST DE SIMULATION D\'ACC√àS PARTAG√â')
    console.log('==========================================')

    if (documents.length > 0) {
      const testDoc = documents[0]
      console.log(`\nüìÑ Test d'acc√®s partag√© pour: ${testDoc.name}`)
      
      // Simuler un acc√®s anonyme (comme un partenaire)
      const anonClient = createClient(supabaseUrl, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY)
      
      try {
        // Test d'acc√®s au document via l'API anonyme
        const { data: anonDoc, error: anonError } = await anonClient
          .from('documents')
          .select('*')
          .eq('id', testDoc.id)
          .single()

        if (anonError) {
          console.log(`   ‚ùå Acc√®s anonyme refus√©: ${anonError.message}`)
          console.log(`   - Code: ${anonError.code || 'N/A'}`)
          console.log(`   - D√©tails: ${anonError.details || 'N/A'}`)
        } else {
          console.log(`   ‚úÖ Acc√®s anonyme autoris√©`)
          console.log(`   - Document: ${anonDoc.name}`)
        }

        // Test d'acc√®s au fichier via l'API anonyme
        const fullPath = `documents/${testDoc.file_path}`
        const { data: anonUrl, error: anonUrlError } = await anonClient.storage
          .from('company-files')
          .createSignedUrl(fullPath, 60)

        if (anonUrlError) {
          console.log(`   ‚ùå Acc√®s storage anonyme refus√©: ${anonUrlError.message}`)
          console.log(`   - Code: ${anonUrlError.statusCode || 'N/A'}`)
        } else {
          console.log(`   ‚úÖ Acc√®s storage anonyme autoris√©`)
          console.log(`   - URL: ${anonUrl.signedUrl.substring(0, 100)}...`)
        }

      } catch (error) {
        console.log(`   ‚ùå Erreur test anonyme: ${error.message}`)
      }
    }

    // =====================================================
    // 5. RECOMMANDATIONS
    // =====================================================
    console.log('\nüìã 5. RECOMMANDATIONS')
    console.log('=====================')

    console.log('\nüõ°Ô∏è  Recommandations pour r√©soudre les probl√®mes de partage:')
    console.log('')
    console.log('1. üîê PERMISSIONS STORAGE:')
    console.log('   - V√©rifier les politiques RLS sur le bucket company-files')
    console.log('   - S\'assurer que les fichiers publics sont accessibles')
    console.log('   - Configurer les permissions pour les acc√®s partag√©s')
    console.log('')
    console.log('2. üìÑ PERMISSIONS DOCUMENTS:')
    console.log('   - V√©rifier les politiques RLS sur la table documents')
    console.log('   - Permettre l\'acc√®s aux documents partag√©s')
    console.log('   - G√©rer les permissions par entreprise')
    console.log('')
    console.log('3. üîó URLS SIGN√âES:')
    console.log('   - Utiliser des URLs sign√©es pour les acc√®s s√©curis√©s')
    console.log('   - G√©rer l\'expiration des URLs')
    console.log('   - Fallback vers URLs publiques si n√©cessaire')
    console.log('')
    console.log('4. üß™ TESTS COMPLETS:')
    console.log('   - Tester l\'acc√®s anonyme aux documents')
    console.log('   - Valider les URLs de partage')
    console.log('   - V√©rifier les permissions en contexte partag√©')

    console.log('\nüéâ Diagnostic de partage termin√©!')

  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic de partage:', error)
  }
}

// Ex√©cution du script
diagnosticPartageDocuments() 