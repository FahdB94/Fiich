const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function verificationApresCorrection() {
  console.log('üîç V√©rification apr√®s correction...\n')

  try {
    // =====================================================
    // 1. V√âRIFICATION DE L'√âTAT ACTUEL EN BASE
    // =====================================================
    console.log('üìã 1. √âTAT ACTUEL EN BASE DE DONN√âES')
    console.log('=====================================')

    const { data: documents, error: documentsError } = await supabase
      .from('documents')
      .select('*')
      .eq('name', 'Document_de_Synthese_J00129376059_v1.pdf')

    if (documentsError) {
      console.log('‚ùå Erreur r√©cup√©ration document:', documentsError.message)
      return
    }

    if (documents.length === 0) {
      console.log('‚ùå Document non trouv√© en base de donn√©es')
      return
    }

    const doc = documents[0]
    console.log('‚úÖ Document trouv√© en base:')
    console.log(`   - ID: ${doc.id}`)
    console.log(`   - Nom: ${doc.name}`)
    console.log(`   - Chemin actuel: ${doc.file_path}`)
    console.log(`   - Entreprise: ${doc.company_id}`)
    console.log(`   - Public: ${doc.is_public}`)
    console.log(`   - Type: ${doc.document_type}`)
    console.log(`   - Cr√©√© le: ${doc.created_at}`)
    console.log(`   - Modifi√© le: ${doc.updated_at}`)

    // =====================================================
    // 2. SIMULATION DU CHEMIN CONSTRUIT PAR L'APPLICATION
    // =====================================================
    console.log('\nüîß 2. SIMULATION DU CHEMIN DE L\'APPLICATION')
    console.log('=============================================')

    const cheminApp = `documents/${doc.file_path}`
    console.log(`üìÅ Chemin construit par l'app: ${cheminApp}`)

    // =====================================================
    // 3. V√âRIFICATION DU FICHIER DANS LE STORAGE
    // =====================================================
    console.log('\nüì¶ 3. V√âRIFICATION DU STORAGE')
    console.log('==============================')

    // Tester le chemin construit par l'app
    console.log(`üîç Test du chemin: ${cheminApp}`)
    const { data: testFile, error: testError } = await supabase.storage
      .from('company-files')
      .list('', { limit: 1000, search: '1754079146251-Document_de_Synthese_J00129376059_v1.pdf' })

    if (testError) {
      console.log('‚ùå Erreur test storage:', testError.message)
    } else {
      console.log(`üìÅ ${testFile.length} fichiers trouv√©s avec ce nom`)
      testFile.forEach(file => {
        console.log(`   - ${file.name}`)
      })
    }

    // =====================================================
    // 4. TEST D'ACC√àS DIRECT AU FICHIER
    // =====================================================
    console.log('\nüéØ 4. TEST D\'ACC√àS DIRECT')
    console.log('==========================')

    // Tester l'acc√®s via URL publique
    const { data: publicUrl } = await supabase.storage
      .from('company-files')
      .getPublicUrl(cheminApp)

    console.log(`üîó URL publique g√©n√©r√©e: ${publicUrl.publicUrl}`)

    // Tester l'acc√®s √† l'URL
    try {
      const response = await fetch(publicUrl.publicUrl, { method: 'HEAD' })
      console.log(`üåê Acc√®s URL: ${response.ok ? '‚úÖ Succ√®s' : '‚ùå √âchec'} (status: ${response.status})`)
      
      if (!response.ok) {
        console.log(`üìÑ R√©ponse compl√®te: ${response.status} ${response.statusText}`)
      }
    } catch (fetchError) {
      console.log(`‚ùå Erreur test URL: ${fetchError.message}`)
    }

    // =====================================================
    // 5. RECHERCHE DU FICHIER R√âEL
    // =====================================================
    console.log('\nüîç 5. RECHERCHE DU FICHIER R√âEL')
    console.log('================================')

    // Lister tous les fichiers dans le bucket
    const { data: allFiles, error: allFilesError } = await supabase.storage
      .from('company-files')
      .list('', { limit: 1000 })

    if (allFilesError) {
      console.log('‚ùå Erreur acc√®s storage:', allFilesError.message)
    } else {
      console.log(`üìÅ ${allFiles.length} fichiers dans le bucket`)
      
      // Chercher le fichier sp√©cifique
      const targetFile = allFiles.find(f => f.name.includes('1754079146251-Document_de_Synthese_J00129376059_v1.pdf'))
      if (targetFile) {
        console.log(`‚úÖ Fichier trouv√©: ${targetFile.name}`)
        console.log(`üìä Taille: ${targetFile.metadata?.size || 'inconnue'} bytes`)
        
        // Tester l'acc√®s √† ce fichier
        const { data: realPublicUrl } = await supabase.storage
          .from('company-files')
          .getPublicUrl(targetFile.name)
        
        console.log(`üîó URL r√©elle: ${realPublicUrl.publicUrl}`)
        
        try {
          const realResponse = await fetch(realPublicUrl.publicUrl, { method: 'HEAD' })
          console.log(`üåê Acc√®s fichier r√©el: ${realResponse.ok ? '‚úÖ Succ√®s' : '‚ùå √âchec'} (status: ${realResponse.status})`)
        } catch (realFetchError) {
          console.log(`‚ùå Erreur acc√®s fichier r√©el: ${realFetchError.message}`)
        }
      } else {
        console.log('‚ùå Fichier non trouv√© dans le bucket')
      }
    }

    // =====================================================
    // 6. DIAGNOSTIC ET RECOMMANDATIONS
    // =====================================================
    console.log('\nüìã 6. DIAGNOSTIC ET RECOMMANDATIONS')
    console.log('=====================================')

    console.log('\nüîç Diagnostic:')
    console.log(`   - Chemin en base: ${doc.file_path}`)
    console.log(`   - Chemin app: ${cheminApp}`)
    console.log(`   - Fichier existe: ${targetFile ? 'Oui' : 'Non'}`)
    
    if (targetFile) {
      console.log(`   - Chemin r√©el: ${targetFile.name}`)
      console.log(`   - Correspondance: ${cheminApp === targetFile.name ? '‚úÖ Parfaite' : '‚ùå Diff√©rente'}`)
    }

    console.log('\nüõ†Ô∏è Recommandations:')
    if (targetFile && cheminApp !== targetFile.name) {
      console.log('1. üîÑ CORRIGER LE CHEMIN EN BASE:')
      console.log(`   - Chemin actuel: ${doc.file_path}`)
      console.log(`   - Chemin n√©cessaire: ${targetFile.name.replace('documents/', '')}`)
      console.log('   - Mettre √† jour file_path dans la base de donn√©es')
    } else if (!targetFile) {
      console.log('1. ‚ùå FICHIER MANQUANT:')
      console.log('   - Le fichier n\'existe pas dans le storage')
      console.log('   - V√©rifier l\'upload ou restaurer le fichier')
    } else {
      console.log('1. ‚úÖ TOUT EST CORRECT:')
      console.log('   - Le chemin correspond au fichier')
      console.log('   - Le probl√®me vient d\'ailleurs (permissions, etc.)')
    }

    console.log('\nüéâ V√©rification termin√©e!')

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error)
  }
}

// Ex√©cution du script
verificationApresCorrection() 