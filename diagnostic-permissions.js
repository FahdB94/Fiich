// ========================================
// DIAGNOSTIC PERMISSIONS - V√©rification compl√®te
// ========================================

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function diagnosticComplet() {
  console.log('üîç DIAGNOSTIC COMPLET DES PERMISSIONS')
  console.log('=====================================\n')

  try {
    // 1. V√©rifier la connexion
    console.log('1. üîå Test de connexion...')
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError) {
      console.log('   ‚ö†Ô∏è  Non authentifi√© (normal pour ce test)')
    } else {
      console.log('   ‚úÖ Utilisateur authentifi√©:', user.email)
    }

    // 2. V√©rifier l'existence des tables
    console.log('\n2. üìã V√©rification des tables...')
    
    const tables = ['users', 'companies', 'documents', 'invitations', 'company_shares']
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('count')
          .limit(1)
        
        if (error) {
          console.log(`   ‚ùå Table ${table}: ${error.message}`)
        } else {
          console.log(`   ‚úÖ Table ${table}: accessible`)
        }
      } catch (err) {
        console.log(`   ‚ùå Table ${table}: erreur - ${err.message}`)
      }
    }

    // 3. V√©rifier l'existence de la fonction get_shared_company
    console.log('\n3. üîß V√©rification de la fonction get_shared_company...')
    try {
      const { data, error } = await supabase
        .rpc('get_shared_company', { share_token_param: 'test' })
      
      if (error) {
        console.log(`   ‚ùå Fonction get_shared_company: ${error.message}`)
      } else {
        console.log('   ‚úÖ Fonction get_shared_company: existe et accessible')
      }
    } catch (err) {
      console.log(`   ‚ùå Fonction get_shared_company: erreur - ${err.message}`)
    }

    // 4. V√©rifier les politiques RLS
    console.log('\n4. üõ°Ô∏è  V√©rification des politiques RLS...')
    try {
      const { data: policies, error } = await supabase
        .from('information_schema.policies')
        .select('*')
        .eq('table_schema', 'public')
      
      if (error) {
        console.log(`   ‚ùå Impossible de r√©cup√©rer les politiques: ${error.message}`)
      } else {
        console.log(`   ‚úÖ ${policies.length} politiques RLS trouv√©es`)
        policies.forEach(policy => {
          console.log(`      - ${policy.table_name}: ${policy.policy_name}`)
        })
      }
    } catch (err) {
      console.log(`   ‚ùå Erreur lors de la v√©rification des politiques: ${err.message}`)
    }

    // 5. V√©rifier le bucket de storage
    console.log('\n5. üì¶ V√©rification du bucket storage...')
    try {
      const { data: buckets, error } = await supabase.storage.listBuckets()
      
      if (error) {
        console.log(`   ‚ùå Erreur bucket storage: ${error.message}`)
      } else {
        const companyFilesBucket = buckets.find(b => b.name === 'company-files')
        if (companyFilesBucket) {
          console.log('   ‚úÖ Bucket company-files: existe')
        } else {
          console.log('   ‚ùå Bucket company-files: manquant')
        }
      }
    } catch (err) {
      console.log(`   ‚ùå Erreur lors de la v√©rification du storage: ${err.message}`)
    }

    // 6. Test avec un token d'invitation
    console.log('\n6. üé´ Test avec un token d\'invitation...')
    try {
      // R√©cup√©rer une invitation existante
      const { data: invitations, error: invError } = await supabase
        .from('invitations')
        .select('invitation_token, company_id')
        .limit(1)
      
      if (invError) {
        console.log(`   ‚ùå Impossible de r√©cup√©rer les invitations: ${invError.message}`)
      } else if (invitations && invitations.length > 0) {
        const invitation = invitations[0]
        console.log(`   ‚úÖ Invitation trouv√©e avec token: ${invitation.invitation_token.substring(0, 10)}...`)
        
        // Tester l'acc√®s √† l'entreprise
        const { data: company, error: compError } = await supabase
          .from('companies')
          .select('company_name')
          .eq('id', invitation.company_id)
          .single()
        
        if (compError) {
          console.log(`   ‚ùå Impossible d'acc√©der √† l'entreprise: ${compError.message}`)
        } else {
          console.log(`   ‚úÖ Acc√®s √† l'entreprise: ${company.company_name}`)
        }
      } else {
        console.log('   ‚ö†Ô∏è  Aucune invitation trouv√©e pour le test')
      }
    } catch (err) {
      console.log(`   ‚ùå Erreur lors du test d'invitation: ${err.message}`)
    }

    console.log('\n=====================================')
    console.log('üéØ RECOMMANDATION:')
    console.log('Appliquez le script SQL final pour r√©soudre tous les probl√®mes:')
    console.log('SCRIPT-FINAL-ANTICIPATION-TOTALE.sql')
    console.log('=====================================')

  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error)
  }
}

// Ex√©cuter le diagnostic
diagnosticComplet() 