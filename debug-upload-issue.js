const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function debugUploadIssue() {
  console.log('üîç Diagnostic du probl√®me d\'upload...\n')

  try {
    // 1. V√©rifier la structure du bucket
    console.log('üìÅ V√©rification de la structure du bucket...')
    const { data: bucketStructure, error: bucketError } = await supabase.storage
      .from('company-files')
      .list('', {
        limit: 1000,
        offset: 0
      })

    if (bucketError) {
      console.error('‚ùå Erreur lors de la v√©rification du bucket:', bucketError)
      return
    }

    console.log('‚úÖ Structure du bucket:')
    bucketStructure.forEach(item => {
      console.log(`   - ${item.name} (${item.metadata?.size || 0} bytes)`)
    })
    console.log('')

    // 2. V√©rifier le dossier documents
    console.log('üìÑ V√©rification du dossier documents...')
    const { data: documentsFolder, error: docsError } = await supabase.storage
      .from('company-files')
      .list('documents', {
        limit: 1000,
        offset: 0
      })

    if (docsError) {
      console.error('‚ùå Erreur lors de la v√©rification du dossier documents:', docsError)
      return
    }

    console.log(`‚úÖ ${documentsFolder.length} √©l√©ments dans le dossier documents:`)
    documentsFolder.forEach(item => {
      console.log(`   - ${item.name} (${item.metadata?.size || 0} bytes)`)
    })
    console.log('')

    // 3. V√©rifier l'entreprise sp√©cifique
    const companyId = 'feab1dd5-e92e-4b72-a3bf-82cdb27d15d6'
    console.log(`üè¢ V√©rification de l'entreprise ${companyId}...`)
    
    const { data: companyFolder, error: companyError } = await supabase.storage
      .from('company-files')
      .list(`documents/${companyId}`, {
        limit: 1000,
        offset: 0
      })

    if (companyError) {
      console.log('‚ÑπÔ∏è  Dossier entreprise non trouv√© ou vide')
    } else {
      console.log(`‚úÖ ${companyFolder.length} fichiers dans le dossier entreprise:`)
      companyFolder.forEach(item => {
        console.log(`   - ${item.name} (${item.metadata?.size || 0} bytes)`)
      })
    }
    console.log('')

    // 4. Simuler le processus d'upload pour identifier le probl√®me
    console.log('üß™ Simulation du processus d\'upload...')
    
    const timestamp = Date.now()
    const testFileName = `${timestamp}-test-file.txt`
    const filePath = `${companyId}/${testFileName}`
    const fullStoragePath = `documents/${filePath}`

    console.log('üìã Param√®tres de test:')
    console.log(`   - Nom du fichier: ${testFileName}`)
    console.log(`   - Chemin relatif: ${filePath}`)
    console.log(`   - Chemin complet: ${fullStoragePath}`)
    console.log('')

    // 5. Cr√©er un fichier de test
    const testContent = 'Ceci est un fichier de test pour diagnostiquer le probl√®me d\'upload.'
    const testFile = new Blob([testContent], { type: 'text/plain' })

    console.log('üì§ Upload du fichier de test...')
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('company-files')
      .upload(fullStoragePath, testFile, {
        cacheControl: '3600',
        upsert: false
      })

    if (uploadError) {
      console.error('‚ùå Erreur lors de l\'upload de test:', uploadError)
      return
    }

    console.log('‚úÖ Upload de test r√©ussi:', uploadData)
    console.log('')

    // 6. V√©rifier l'existence avec la m√™me logique que le code
    console.log('üîç V√©rification avec la logique du code...')
    const { data: fileCheck, error: checkError } = await supabase.storage
      .from('company-files')
      .list('documents', {
        limit: 1000,
        offset: 0
      })

    if (checkError) {
      console.error('‚ùå Erreur lors de la v√©rification:', checkError)
      return
    }

    console.log('üìã Fichiers trouv√©s dans documents/:')
    fileCheck.forEach(file => {
      console.log(`   - ${file.name}`)
    })
    console.log('')

    // 7. Test de la logique de comparaison
    console.log('üîç Test de la logique de comparaison...')
    console.log(`   - filePath recherch√©: "${filePath}"`)
    
    const fileExists = fileCheck.some(file => file.name === filePath)
    console.log(`   - R√©sultat de la comparaison: ${fileExists}`)
    
    if (!fileExists) {
      console.log('‚ùå PROBL√àME IDENTIFI√â: La logique de comparaison est incorrecte!')
      console.log('')
      console.log('üîç Analyse du probl√®me:')
      console.log('   - Le code compare file.name === filePath')
      console.log('   - Mais file.name contient le chemin complet')
      console.log('   - Et filePath ne contient que le chemin relatif')
      console.log('')
      console.log('üìã Exemples de comparaisons:')
      fileCheck.forEach(file => {
        const matches = file.name === filePath
        console.log(`   - "${file.name}" === "${filePath}" = ${matches}`)
      })
    } else {
      console.log('‚úÖ La logique de comparaison fonctionne correctement')
    }

    // 8. Nettoyer le fichier de test
    console.log('')
    console.log('üßπ Nettoyage du fichier de test...')
    const { error: deleteError } = await supabase.storage
      .from('company-files')
      .remove([fullStoragePath])

    if (deleteError) {
      console.error('‚ùå Erreur lors du nettoyage:', deleteError)
    } else {
      console.log('‚úÖ Fichier de test supprim√©')
    }

    // 9. Recommandations
    console.log('')
    console.log('üìã Recommandations pour corriger le probl√®me:')
    console.log('')
    console.log('1. üîß Corriger la logique de comparaison:')
    console.log('   - Utiliser file.name === filePath au lieu de la comparaison actuelle')
    console.log('   - Ou extraire le nom du fichier du chemin complet')
    console.log('')
    console.log('2. üß™ Ajouter des logs d√©taill√©s:')
    console.log('   - Logger les valeurs exactes de file.name et filePath')
    console.log('   - Logger le r√©sultat de chaque comparaison')
    console.log('')
    console.log('3. üõ°Ô∏è Am√©liorer la robustesse:')
    console.log('   - Utiliser une fonction de normalisation des chemins')
    console.log('   - G√©rer les cas edge (chemins vides, caract√®res sp√©ciaux)')

  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error)
  }
}

// Ex√©cution du script
debugUploadIssue() 