const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function verificationStructureInvitations() {
  console.log('üîç V√©rification de la structure de la table invitations...\n')

  try {
    // =====================================================
    // 1. V√âRIFICATION DE LA TABLE INVITATIONS
    // =====================================================
    console.log('üìã 1. V√âRIFICATION DE LA TABLE INVITATIONS')
    console.log('===========================================')

    // Essayer de r√©cup√©rer la structure de la table
    try {
      const { data: invitations, error: invitationsError } = await supabase
        .from('invitations')
        .select('*')
        .limit(1)

      if (invitationsError) {
        console.log('‚ùå Erreur acc√®s invitations:', invitationsError.message)
      } else {
        console.log(`‚úÖ Table invitations accessible`)
        
        if (invitations && invitations.length > 0) {
          const sampleInvitation = invitations[0]
          console.log('üìã Colonnes dans invitations:')
          Object.keys(sampleInvitation).forEach(key => {
            console.log(`   - ${key}: ${typeof sampleInvitation[key]} (${sampleInvitation[key] ? 'avec valeur' : 'null/vide'})`)
          })
        } else {
          console.log('‚ÑπÔ∏è  Table invitations vide, cr√©ation d\'un enregistrement de test...')
          
          // Cr√©er un enregistrement de test pour voir la structure
          const { data: testInvitation, error: testError } = await supabase
            .from('invitations')
            .insert({
              company_id: '00000000-0000-0000-0000-000000000000', // UUID fictif
              email: 'test@example.com',
              invited_by_user_id: '00000000-0000-0000-0000-000000000000', // UUID fictif
              role: 'member',
              status: 'pending',
              token: 'test-token-123',
              expires_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
            })
            .select()
            .single()

          if (testError) {
            console.log('‚ùå Erreur cr√©ation test invitation:', testError.message)
            console.log('üîç D√©tails de l\'erreur:', testError)
          } else {
            console.log('‚úÖ Enregistrement de test cr√©√©')
            console.log('üìã Structure de la table invitations:')
            Object.keys(testInvitation).forEach(key => {
              console.log(`   - ${key}: ${typeof testInvitation[key]} (${testInvitation[key] ? 'avec valeur' : 'null/vide'})`)
            })
            
            // Nettoyer l'enregistrement de test
            await supabase.from('invitations').delete().eq('id', testInvitation.id)
            console.log('üßπ Enregistrement de test supprim√©')
          }
        }
      }
    } catch (error) {
      console.log('‚ùå Erreur g√©n√©rale invitations:', error.message)
    }

    // =====================================================
    // 2. V√âRIFICATION DES AUTRES TABLES
    // =====================================================
    console.log('\nüìã 2. V√âRIFICATION DES AUTRES TABLES')
    console.log('=====================================')

    const tablesToCheck = ['company_shares', 'user_companies']

    for (const tableName of tablesToCheck) {
      try {
        const { data, error } = await supabase
          .from(tableName)
          .select('*')
          .limit(1)

        if (error) {
          console.log(`‚ùå Table ${tableName}: ${error.message}`)
        } else {
          console.log(`‚úÖ Table ${tableName}: accessible`)
          
          if (data && data.length > 0) {
            const sampleRow = data[0]
            console.log(`   üìã Colonnes dans ${tableName}:`)
            Object.keys(sampleRow).forEach(key => {
              console.log(`      - ${key}: ${typeof sampleRow[key]} (${sampleRow[key] ? 'avec valeur' : 'null/vide'})`)
            })
          } else {
            console.log(`   ‚ÑπÔ∏è  Table ${tableName} vide`)
          }
        }
      } catch (error) {
        console.log(`‚ùå Erreur table ${tableName}: ${error.message}`)
      }
    }

    // =====================================================
    // 3. RECHERCHE D'ALTERNATIVES POUR EMAIL
    // =====================================================
    console.log('\nüîç 3. RECHERCHE D\'ALTERNATIVES POUR EMAIL')
    console.log('==========================================')

    // V√©rifier s'il y a d'autres colonnes qui pourraient contenir l'email
    try {
      const { data: invitations, error: invitationsError } = await supabase
        .from('invitations')
        .select('*')
        .limit(1)

      if (!invitationsError && invitations && invitations.length > 0) {
        const invitation = invitations[0]
        console.log('üîç Colonnes potentiellement li√©es √† l\'email dans invitations:')
        
        const emailRelatedColumns = Object.keys(invitation).filter(key => 
          key.toLowerCase().includes('email') || 
          key.toLowerCase().includes('mail') ||
          key.toLowerCase().includes('contact') ||
          key.toLowerCase().includes('user')
        )
        
        if (emailRelatedColumns.length > 0) {
          emailRelatedColumns.forEach(col => {
            console.log(`   ‚úÖ ${col}: ${invitation[col]}`)
          })
        } else {
          console.log('   ‚ÑπÔ∏è  Aucune colonne email trouv√©e')
        }
      }
    } catch (error) {
      console.log('‚ùå Erreur recherche alternatives email:', error.message)
    }

    // =====================================================
    // 4. RECOMMANDATIONS
    // =====================================================
    console.log('\nüìã 4. RECOMMANDATIONS')
    console.log('=====================')

    console.log('\nüõ†Ô∏è  Solutions pour r√©soudre l\'erreur "column i.email does not exist":')
    console.log('')
    console.log('1. üîç V√âRIFIER LA STRUCTURE INVITATIONS:')
    console.log('   - La colonne email pourrait s\'appeler diff√©remment')
    console.log('   - Utiliser la colonne correcte (ex: user_email, invited_email)')
    console.log('')
    console.log('2. üîß ADAPTER LE SCRIPT:')
    console.log('   - Remplacer "i.email" par le nom correct de la colonne')
    console.log('   - Ou modifier la structure de la table invitations')
    console.log('')
    console.log('3. üß™ CR√âER LA COLONNE MANQUANTE:')
    console.log('   - ALTER TABLE invitations ADD COLUMN email TEXT;')
    console.log('   - Ou utiliser une colonne existante')
    console.log('')
    console.log('4. üìù MODIFIER LA VUE:')
    console.log('   - Adapter accessible_documents pour utiliser la bonne colonne')
    console.log('   - V√©rifier toutes les r√©f√©rences √† i.email')

    console.log('\nüéâ V√©rification de la structure termin√©e!')

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error)
  }
}

// Ex√©cution du script
verificationStructureInvitations() 