const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function investigateKBISOrphan() {
  console.log('üîç Investigation du fichier KBIS orphelin...\n')

  try {
    // 1. V√©rifier l'utilisateur fahdbari94@gmail.com
    console.log('üë§ Recherche de l\'utilisateur fahdbari94@gmail.com...')
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'fahdbari94@gmail.com')
      .single()

    if (userError) {
      console.error('‚ùå Erreur lors de la recherche de l\'utilisateur:', userError)
      return
    }

    if (!user) {
      console.log('‚ùå Utilisateur fahdbari94@gmail.com non trouv√©')
      return
    }

    console.log(`‚úÖ Utilisateur trouv√©: ${user.email} (ID: ${user.id})`)
    console.log(`   - Cr√©√©: ${user.created_at}`)
    console.log(`   - Derni√®re connexion: ${user.last_sign_in_at || 'Jamais'}\n`)

    // 2. Rechercher les entreprises de cet utilisateur
    console.log('üè¢ Recherche des entreprises de l\'utilisateur...')
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('*')
      .eq('user_id', user.id)

    if (companiesError) {
      console.error('‚ùå Erreur lors de la recherche des entreprises:', companiesError)
      return
    }

    console.log(`‚úÖ ${companies.length} entreprise(s) trouv√©e(s) pour l'utilisateur\n`)

    companies.forEach((company, index) => {
      console.log(`   ${index + 1}. ${company.company_name}`)
      console.log(`      - ID: ${company.id}`)
      console.log(`      - SIRET: ${company.siret}`)
      console.log(`      - Cr√©√©: ${company.created_at}`)
      console.log(`      - Modifi√©: ${company.updated_at}`)
      console.log('')
    })

    // 3. Rechercher les documents li√©s √† ces entreprises
    console.log('üìÑ Recherche des documents li√©s aux entreprises...')
    const companyIds = companies.map(c => c.id)
    
    if (companyIds.length === 0) {
      console.log('‚ùå Aucune entreprise trouv√©e, impossible de rechercher des documents')
      return
    }

    const { data: documents, error: documentsError } = await supabase
      .from('documents')
      .select('*')
      .in('company_id', companyIds)
      .order('created_at', { ascending: false })

    if (documentsError) {
      console.error('‚ùå Erreur lors de la recherche des documents:', documentsError)
      return
    }

    console.log(`‚úÖ ${documents.length} document(s) trouv√©(s)\n`)

    if (documents.length > 0) {
      documents.forEach((doc, index) => {
        console.log(`   ${index + 1}. ${doc.name}`)
        console.log(`      - ID: ${doc.id}`)
        console.log(`      - Type: ${doc.document_type || 'Non sp√©cifi√©'}`)
        console.log(`      - Chemin: ${doc.file_path}`)
        console.log(`      - Taille: ${doc.file_size} bytes`)
        console.log(`      - Cr√©√©: ${doc.created_at}`)
        console.log(`      - Entreprise: ${companies.find(c => c.id === doc.company_id)?.company_name}`)
        console.log('')
      })
    }

    // 4. Rechercher sp√©cifiquement le fichier KBIS probl√©matique
    console.log('üîç Recherche sp√©cifique du fichier KBIS...')
    const kbisFileName = '1754059702600-Document_de_Synthese_J00129376059_v1.pdf'
    
    // V√©rifier dans les logs ou l'historique
    const { data: kbisDocs, error: kbisError } = await supabase
      .from('documents')
      .select('*')
      .ilike('name', '%KBIS%')
      .order('created_at', { ascending: false })

    if (kbisError) {
      console.error('‚ùå Erreur lors de la recherche des KBIS:', kbisError)
    } else {
      console.log(`‚úÖ ${kbisDocs.length} document(s) KBIS trouv√©(s)\n`)
      
      kbisDocs.forEach((doc, index) => {
        console.log(`   ${index + 1}. ${doc.name}`)
        console.log(`      - ID: ${doc.id}`)
        console.log(`      - Type: ${doc.document_type || 'Non sp√©cifi√©'}`)
        console.log(`      - Chemin: ${doc.file_path}`)
        console.log(`      - Cr√©√©: ${doc.created_at}`)
        console.log(`      - Entreprise: ${companies.find(c => c.id === doc.company_id)?.company_name}`)
        console.log('')
      })
    }

    // 5. V√©rifier les logs d'audit ou les tables de logs
    console.log('üìã Recherche dans les logs d\'audit...')
    
    // V√©rifier s'il y a une table d'audit ou de logs
    const { data: auditLogs, error: auditError } = await supabase
      .from('audit_logs')
      .select('*')
      .ilike('action', '%document%')
      .order('created_at', { ascending: false })
      .limit(10)

    if (auditError) {
      console.log('‚ÑπÔ∏è  Aucune table d\'audit trouv√©e ou accessible')
    } else {
      console.log(`‚úÖ ${auditLogs.length} log(s) d'audit trouv√©(s)\n`)
      auditLogs.forEach((log, index) => {
        console.log(`   ${index + 1}. ${log.action}`)
        console.log(`      - Utilisateur: ${log.user_id}`)
        console.log(`      - Date: ${log.created_at}`)
        console.log(`      - D√©tails: ${log.details || 'Aucun'}`)
        console.log('')
      })
    }

    // 6. Analyser le processus d'upload actuel
    console.log('üîß Analyse du processus d\'upload...')
    console.log('   - V√©rification du code d\'upload dans enhanced-document-manager.tsx')
    console.log('   - Recherche de probl√®mes potentiels dans la logique d\'upload')
    console.log('')

    // 7. V√©rifier les permissions et RLS
    console.log('üîê V√©rification des permissions...')
    
    // V√©rifier les politiques RLS sur la table documents
    const { data: rlsPolicies, error: rlsError } = await supabase
      .rpc('get_rls_policies', { table_name: 'documents' })
      .catch(() => ({ data: null, error: 'Fonction non disponible' }))

    if (rlsError) {
      console.log('‚ÑπÔ∏è  Impossible de v√©rifier les politiques RLS directement')
    } else {
      console.log(`‚úÖ Politiques RLS trouv√©es: ${rlsPolicies?.length || 0}`)
    }

    // 8. Recommandations
    console.log('üìã Recommandations pour √©viter les fichiers orphelins:')
    console.log('')
    console.log('1. üîÑ Am√©liorer la logique d\'upload:')
    console.log('   - Utiliser des transactions pour garantir l\'atomicit√©')
    console.log('   - V√©rifier l\'existence du fichier apr√®s upload')
    console.log('   - Impl√©menter un rollback en cas d\'√©chec')
    console.log('')
    console.log('2. üìù Ajouter des logs d√©taill√©s:')
    console.log('   - Logger chaque √©tape du processus d\'upload')
    console.log('   - Cr√©er une table d\'audit pour tracer les op√©rations')
    console.log('   - Monitorer les √©checs d\'upload')
    console.log('')
    console.log('3. üõ°Ô∏è Renforcer la validation:')
    console.log('   - Valider le fichier avant l\'upload')
    console.log('   - V√©rifier les permissions utilisateur')
    console.log('   - Impl√©menter des contr√¥les de coh√©rence')
    console.log('')
    console.log('4. üîç Monitoring continu:')
    console.log('   - Ex√©cuter le diagnostic r√©guli√®rement')
    console.log('   - Alerter en cas de fichiers orphelins')
    console.log('   - Automatiser le nettoyage')

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'investigation:', error)
  }
}

// Fonction pour restaurer le fichier KBIS si n√©cessaire
async function restoreKBISFile() {
  console.log('üîÑ Tentative de restauration du fichier KBIS...\n')

  try {
    // Rechercher l'utilisateur
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'fahdbari94@gmail.com')
      .single()

    if (userError || !user) {
      console.log('‚ùå Utilisateur non trouv√©')
      return
    }

    // Rechercher les entreprises de l'utilisateur
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('*')
      .eq('user_id', user.id)

    if (companiesError || !companies.length) {
      console.log('‚ùå Aucune entreprise trouv√©e')
      return
    }

    // V√©rifier si le fichier existe encore dans le storage
    const fileName = '1754059702600-Document_de_Synthese_J00129376059_v1.pdf'
    const companyId = companies[0].id
    const filePath = `${companyId}/${fileName}`
    const fullPath = `documents/${filePath}`

    console.log(`üîç V√©rification du fichier: ${fullPath}`)

    // V√©rifier l'existence dans le storage
    const { data: fileExists, error: storageError } = await supabase.storage
      .from('company-files')
      .list('documents', {
        limit: 1000,
        offset: 0
      })

    if (storageError) {
      console.error('‚ùå Erreur lors de la v√©rification du storage:', storageError)
      return
    }

    const fileInStorage = fileExists.find(file => file.name === filePath)
    
    if (fileInStorage) {
      console.log('‚úÖ Fichier trouv√© dans le storage, restauration de l\'entr√©e en base...')
      
      // Recr√©er l'entr√©e en base de donn√©es
      const { data: newDoc, error: insertError } = await supabase
        .from('documents')
        .insert({
          name: fileName,
          file_path: filePath,
          mime_type: 'application/pdf',
          file_size: fileInStorage.metadata?.size || 246856,
          company_id: companyId,
          document_type: 'KBIS',
          display_name: 'Document de Synth√®se KBIS'
        })
        .select()
        .single()

      if (insertError) {
        console.error('‚ùå Erreur lors de la restauration:', insertError)
      } else {
        console.log('‚úÖ Fichier KBIS restaur√© avec succ√®s!')
        console.log(`   - ID: ${newDoc.id}`)
        console.log(`   - Nom: ${newDoc.name}`)
        console.log(`   - Entreprise: ${companies[0].company_name}`)
      }
    } else {
      console.log('‚ùå Fichier non trouv√© dans le storage')
      console.log('   - Le fichier a probablement √©t√© supprim√© manuellement')
      console.log('   - Ou il y a eu un probl√®me lors de l\'upload initial')
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la restauration:', error)
  }
}

// Ex√©cution du script
const args = process.argv.slice(2)
if (args.includes('--restore')) {
  restoreKBISFile()
} else {
  investigateKBISOrphan()
} 