'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { useToast } from '@/hooks/use-toast'
import { supabase } from '@/lib/supabase'
import { Mail, Link as LinkIcon, Copy, CheckCircle, XCircle, Share2 } from 'lucide-react'

interface ShareCompanyProps {
  companyId: string
  companyName: string
}

export default function ShareCompany({ companyId, companyName }: ShareCompanyProps) {
  const [email, setEmail] = useState('')
  const [message, setMessage] = useState('')
  const [loading, setLoading] = useState(false)
  const [shareLink, setShareLink] = useState('')
  const [shareLinkLoading, setShareLinkLoading] = useState(false)
  const [copied, setCopied] = useState(false)
  const [isOpen, setIsOpen] = useState(false)
  const { toast } = useToast()

  const handleEmailShare = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!email.trim()) {
      toast.error('Veuillez saisir une adresse email')
      return
    }

    setLoading(true)

    try {
      // Récupérer le token d'authentification
      const { data: { session } } = await supabase.auth.getSession()
      if (!session?.access_token) {
        toast.error('Vous devez être connecté pour partager')
        return
      }

      const response = await fetch('/api/share-company', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${session.access_token}`
        },
        body: JSON.stringify({
          companyId,
          email: email.trim(),
          message: message.trim()
        })
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || 'Erreur lors de l\'envoi de l\'invitation')
      }

      toast.success(`Invitation envoyée à ${email}`)

      // Réinitialiser le formulaire
      setEmail('')
      setMessage('')
      setIsOpen(false)

    } catch (error) {
      console.error('Erreur lors du partage:', error)
      toast.error(error instanceof Error ? error.message : 'Erreur lors de l\'envoi de l\'invitation')
    } finally {
      setLoading(false)
    }
  }

  const generateShareLink = async () => {
    setShareLinkLoading(true)

    try {
      // Récupérer le token d'authentification
      const { data: { session } } = await supabase.auth.getSession()
      if (!session?.access_token) {
        toast.error('Vous devez être connecté pour générer un lien')
        return
      }

      const response = await fetch('/api/generate-share-link', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${session.access_token}`
        },
        body: JSON.stringify({ companyId })
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || 'Erreur lors de la génération du lien')
      }

      setShareLink(data.shareLink)
      toast.success('Lien de partage généré avec succès')

    } catch (error) {
      console.error('Erreur lors de la génération du lien:', error)
      toast.error(error instanceof Error ? error.message : 'Erreur lors de la génération du lien')
    } finally {
      setShareLinkLoading(false)
    }
  }

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(shareLink)
      setCopied(true)
      toast.success('Le lien a été copié dans le presse-papiers')
      setTimeout(() => setCopied(false), 2000)
    } catch (error) {
      toast.error('Impossible de copier le lien')
    }
  }

  return (
    <>
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogTrigger asChild>
          <Button variant="outline" className="flex items-center gap-2">
            <Share2 className="h-4 w-4" />
            Partager
          </Button>
        </DialogTrigger>
        
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Share2 className="h-5 w-5" />
              Partager {companyName}
            </DialogTitle>
            <DialogDescription>
              Partagez les informations de votre entreprise par email ou générez un lien public
            </DialogDescription>
          </DialogHeader>

          <Tabs defaultValue="email" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="email" className="flex items-center gap-2">
                <Mail className="h-4 w-4" />
                Email
              </TabsTrigger>
              <TabsTrigger value="link" className="flex items-center gap-2">
                <LinkIcon className="h-4 w-4" />
                Lien public
              </TabsTrigger>
            </TabsList>

            <TabsContent value="email" className="space-y-4">
              <form onSubmit={handleEmailShare} className="space-y-4">
                <div>
                  <label htmlFor="email" className="block text-sm font-medium mb-2">
                    Adresse email
                  </label>
                  <Input
                    id="email"
                    type="email"
                    placeholder="exemple@email.com"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                  />
                </div>

                <div>
                  <label htmlFor="message" className="block text-sm font-medium mb-2">
                    Message (optionnel)
                  </label>
                  <Textarea
                    id="message"
                    placeholder="Ajoutez un message personnel..."
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    rows={3}
                  />
                </div>

                <Button type="submit" disabled={loading} className="w-full">
                  {loading ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Envoi en cours...
                    </>
                  ) : (
                    <>
                      <Mail className="h-4 w-4 mr-2" />
                      Envoyer l'invitation
                    </>
                  )}
                </Button>
              </form>
            </TabsContent>

            <TabsContent value="link" className="space-y-4">
              <div className="space-y-4">
                <div className="text-sm text-muted-foreground">
                  <p>Générez un lien public pour partager votre entreprise avec n'importe qui.</p>
                  <p className="mt-2">
                    <Badge variant="secondary" className="text-xs">
                      ⚠️ Attention : Ce lien sera accessible publiquement
                    </Badge>
                  </p>
                </div>

                {!shareLink ? (
                  <Button 
                    onClick={generateShareLink} 
                    disabled={shareLinkLoading}
                    className="w-full"
                  >
                    {shareLinkLoading ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        Génération...
                      </>
                    ) : (
                      <>
                        <LinkIcon className="h-4 w-4 mr-2" />
                        Générer un lien de partage
                      </>
                    )}
                  </Button>
                ) : (
                  <div className="space-y-3">
                    <div className="flex items-center gap-2 p-3 bg-muted rounded-lg">
                      <input
                        type="text"
                        value={shareLink}
                        readOnly
                        className="flex-1 bg-transparent border-none outline-none text-sm"
                      />
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={copyToClipboard}
                        className="h-8 w-8 p-0"
                      >
                        {copied ? (
                          <CheckCircle className="h-4 w-4 text-green-500" />
                        ) : (
                          <Copy className="h-4 w-4" />
                        )}
                      </Button>
                    </div>
                    
                    <div className="flex gap-2">
                      <Button
                        variant="outline"
                        onClick={() => setShareLink('')}
                        className="flex-1"
                      >
                        <XCircle className="h-4 w-4 mr-2" />
                        Nouveau lien
                      </Button>
                      <Button
                        onClick={copyToClipboard}
                        className="flex-1"
                      >
                        <Copy className="h-4 w-4 mr-2" />
                        Copier
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            </TabsContent>
          </Tabs>
        </DialogContent>
      </Dialog>
    </>
  )
} 