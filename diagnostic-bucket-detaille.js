// DIAGNOSTIC D√âTAILL√â - Pourquoi l'application ne trouve pas le bucket
const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = 'https://jjibjvxdiqvuseaexivl.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpqaWJqdnhkaXF2dXNlYWV4aXZsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5MDU4OTcsImV4cCI6MjA2OTQ4MTg5N30.zvfXx4LXIozX_3WA3M19uza83FmMP7vDjgq6hAtb12Q'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpqaWJqdnhkaXF2dXNlYWV4aXZsIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzkwNTg5NywiZXhwIjoyMDY5NDgxODk3fQ.XL_jXSUFAxchEu-POq3JjF5oHs7e0J22ufhYlUXfUHc'

const anonClient = createClient(supabaseUrl, supabaseAnonKey)
const serviceClient = createClient(supabaseUrl, supabaseServiceKey)

async function diagnosticDetaille() {
  console.log('üîç DIAGNOSTIC D√âTAILL√â - Bucket not found\n')
  console.log('=' .repeat(60))
  
  try {
    // 1. TEST AVEC LA CL√â ANONYME (comme l'application)
    console.log('\n1Ô∏è‚É£ TEST AVEC CL√â ANONYME (comme l\'app)')
    console.log('-'.repeat(40))
    
    const { data: bucketsAnon, error: bucketsAnonError } = await anonClient.storage.listBuckets()
    
    if (bucketsAnonError) {
      console.log(`‚ùå Erreur avec cl√© anonyme: ${bucketsAnonError.message}`)
    } else {
      console.log(`‚úÖ Buckets trouv√©s avec cl√© anonyme: ${bucketsAnon.length}`)
      bucketsAnon.forEach(bucket => {
        console.log(`   - ${bucket.name} (public: ${bucket.public})`)
      })
    }
    
    // 2. TEST AVEC LA CL√â SERVICE
    console.log('\n2Ô∏è‚É£ TEST AVEC CL√â SERVICE')
    console.log('-'.repeat(40))
    
    const { data: bucketsService, error: bucketsServiceError } = await serviceClient.storage.listBuckets()
    
    if (bucketsServiceError) {
      console.log(`‚ùå Erreur avec cl√© service: ${bucketsServiceError.message}`)
    } else {
      console.log(`‚úÖ Buckets trouv√©s avec cl√© service: ${bucketsService.length}`)
      bucketsService.forEach(bucket => {
        console.log(`   - ${bucket.name} (public: ${bucket.public})`)
      })
    }
    
    // 3. TEST D'ACC√àS DIRECT AU BUCKET
    console.log('\n3Ô∏è‚É£ TEST ACC√àS DIRECT AU BUCKET')
    console.log('-'.repeat(40))
    
    // Test avec cl√© anonyme
    const { data: filesAnon, error: filesAnonError } = await anonClient.storage
      .from('company-files')
      .list('', { limit: 1 })
    
    if (filesAnonError) {
      console.log(`‚ùå Erreur acc√®s bucket avec cl√© anonyme: ${filesAnonError.message}`)
    } else {
      console.log('‚úÖ Acc√®s bucket OK avec cl√© anonyme')
    }
    
    // Test avec cl√© service
    const { data: filesService, error: filesServiceError } = await serviceClient.storage
      .from('company-files')
      .list('', { limit: 1 })
    
    if (filesServiceError) {
      console.log(`‚ùå Erreur acc√®s bucket avec cl√© service: ${filesServiceError.message}`)
    } else {
      console.log('‚úÖ Acc√®s bucket OK avec cl√© service')
    }
    
    // 4. V√âRIFIER LES POLITIQUES STORAGE
    console.log('\n4Ô∏è‚É£ V√âRIFICATION POLITIQUES STORAGE')
    console.log('-'.repeat(40))
    
    // Cr√©er un fichier de test pour v√©rifier les politiques
    const testContent = 'Test file content'
    const testFile = new Blob([testContent], { type: 'text/plain' })
    const testPath = `test-${Date.now()}/test-file.txt`
    
    const { data: uploadData, error: uploadError } = await anonClient.storage
      .from('company-files')
      .upload(testPath, testFile)
    
    if (uploadError) {
      console.log(`‚ùå Erreur upload avec cl√© anonyme: ${uploadError.message}`)
      
      if (uploadError.message.includes('Bucket not found')) {
        console.log('   ‚Üí Le bucket n\'est pas accessible avec la cl√© anonyme')
        console.log('   ‚Üí Probl√®me de permissions ou de configuration')
      } else if (uploadError.message.includes('policy')) {
        console.log('   ‚Üí Probl√®me de politique RLS sur le storage')
      }
    } else {
      console.log('‚úÖ Upload r√©ussi avec cl√© anonyme')
      console.log(`   Path: ${uploadData.path}`)
      
      // Nettoyer
      await anonClient.storage
        .from('company-files')
        .remove([testPath])
      console.log('   ‚Üí Fichier de test supprim√©')
    }
    
    // 5. V√âRIFIER LA CONFIGURATION DU BUCKET
    console.log('\n5Ô∏è‚É£ CONFIGURATION DU BUCKET')
    console.log('-'.repeat(40))
    
    const { data: bucketConfig, error: bucketConfigError } = await serviceClient.storage.getBucket('company-files')
    
    if (bucketConfigError) {
      console.log(`‚ùå Erreur r√©cup√©ration config bucket: ${bucketConfigError.message}`)
    } else {
      console.log('‚úÖ Configuration bucket r√©cup√©r√©e:')
      console.log(`   Nom: ${bucketConfig.name}`)
      console.log(`   Public: ${bucketConfig.public}`)
      console.log(`   File size limit: ${bucketConfig.file_size_limit}`)
      console.log(`   Allowed MIME types: ${bucketConfig.allowed_mime_types?.join(', ')}`)
    }
    
    // 6. R√âSUM√â ET SOLUTIONS
    console.log('\n6Ô∏è‚É£ R√âSUM√â ET SOLUTIONS')
    console.log('-'.repeat(40))
    
    if (uploadError && uploadError.message.includes('Bucket not found')) {
      console.log('üéØ PROBL√àME IDENTIFI√â: Bucket non accessible')
      console.log('')
      console.log('üìã SOLUTIONS:')
      console.log('1. V√©rifier que le bucket existe dans Supabase Dashboard')
      console.log('2. Appliquer le script creation-bucket-storage.sql')
      console.log('3. V√©rifier les politiques RLS sur storage.objects')
      console.log('4. Red√©marrer l\'application apr√®s correction')
    } else if (uploadError && uploadError.message.includes('policy')) {
      console.log('üéØ PROBL√àME IDENTIFI√â: Politiques storage')
      console.log('')
      console.log('üìã SOLUTION:')
      console.log('1. Appliquer creation-bucket-storage.sql dans Supabase')
      console.log('2. Vider le cache du navigateur')
      console.log('3. Reconnectez-vous √† l\'application')
    } else if (!uploadError) {
      console.log('‚úÖ TOUT FONCTIONNE !')
      console.log('   Le probl√®me vient du cache du navigateur.')
      console.log('   ‚Üí Vider le cache: Cmd+Shift+R')
      console.log('   ‚Üí Reconnectez-vous √† l\'application')
    }
    
  } catch (error) {
    console.log(`üí• Erreur inattendue: ${error.message}`)
  }
}

diagnosticDetaille() 